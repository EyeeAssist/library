<<<<<<< HEAD
(()=>{"use strict";class t{constructor(){this.hasInsertedAccess=!1,this.active_filter=!1,this.colorBlindnessClasses=["protanopia","protanomaly","deuteranopia","deuteranomaly","tritanopia","tritanomaly","achromatopsia","achromatomaly","grayscale"],this.visionClasses=["vision-loss-moderate","vision-loss-severe","vision-blindness"],this.cssFilter="\n  <style>.protanopia{-webkit-filter:url(#protanopia) grayscale(0)!important;filter:url(#protanopia) grayscale(0)!important}.protanomaly{-webkit-filter:url(#protanomaly) grayscale(0)!important;filter:url(#protanomaly) grayscale(0)!important}.deuteranopia{-webkit-filter:url(#deuteranopia) grayscale(0)!important;filter:url(#deuteranopia) grayscale(0)!important}.deuteranomaly{-webkit-filter:url(#deuteranomaly) grayscale(0)!important;filter:url(#deuteranomaly) grayscale(0)!important}.tritanopia{-webkit-filter:url(#tritanopia) grayscale(0)!important;filter:url(#tritanopia) grayscale(0)!important}.tritanomaly{-webkit-filter:url(#tritanomaly) grayscale(0)!important;filter:url(#tritanomaly) grayscale(0)!important}.achromatopsia{-webkit-filter:url(#achromatopsia) grayscale(0)!important;filter:url(#achromatopsia) grayscale(0)!important}.achromatomaly{-webkit-filter:url(#achromatomaly) grayscale(0)!important;filter:url(#achromatomaly) grayscale(0)!important}.grayscale{-webkit-filter:grayscale(100%)!important;filter:grayscale(100%)!important}.vision-loss-moderate body>*{-webkit-filter:blur(1px)!important;filter:blur(1px)!important}.vision-loss-severe body>*{-webkit-filter:blur(10px)!important;filter:blur(10px)!important}.vision-blindness body>*{background-color:#fff!important;-webkit-filter:brightness(0)!important;filter:brightness(0)!important}#access-filter{border:0;clip:rect(1px,1px,1px,1px);-webkit-clip-path:inset(50%);clip-path:inset(50%);height:1px;margin:-1px;width:1px;overflow:hidden;position:absolute!important;word-wrap:normal!important}</style>",this.svgFilterTemplate='<svg \n  id="access-filter"\n  aria-hidden="true"\n  xmlns="http://www.w3.org/2000/svg"\n  version="1.1">\n  <defs>\n    <filter id="protanopia">\n      <feColorMatrix\n        in="SourceGraphic"\n        type="matrix"\n        values="0.567, 0.433, 0,     0, 0\n                0.558, 0.442, 0,     0, 0\n                0,     0.242, 0.758, 0, 0\n                0,     0,     0,     1, 0"/>\n    </filter>\n    <filter id="protanomaly">\n      <feColorMatrix\n        in="SourceGraphic"\n        type="matrix"\n        values="0.817, 0.183, 0,     0, 0\n                0.333, 0.667, 0,     0, 0\n                0,     0.125, 0.875, 0, 0\n                0,     0,     0,     1, 0"/>\n    </filter>\n    <filter id="deuteranopia">\n      <feColorMatrix\n        in="SourceGraphic"\n        type="matrix"\n        values="0.625, 0.375, 0,   0, 0\n                0.7,   0.3,   0,   0, 0\n                0,     0.3,   0.7, 0, 0\n                0,     0,     0,   1, 0"/>\n    </filter>\n    <filter id="deuteranomaly">\n      <feColorMatrix\n        in="SourceGraphic"\n        type="matrix"\n        values="0.8,   0.2,   0,     0, 0\n                0.258, 0.742, 0,     0, 0\n                0,     0.142, 0.858, 0, 0\n                0,     0,     0,     1, 0"/>\n    </filter>\n    <filter id="tritanopia">\n      <feColorMatrix\n        in="SourceGraphic"\n        type="matrix"\n        values="0.95, 0.05,  0,     0, 0\n                0,    0.433, 0.567, 0, 0\n                0,    0.475, 0.525, 0, 0\n                0,    0,     0,     1, 0"/>\n    </filter>\n    <filter id="tritanomaly">\n      <feColorMatrix\n        in="SourceGraphic"\n        type="matrix"\n        values="0.967, 0.033, 0,     0, 0\n                0,     0.733, 0.267, 0, 0\n                0,     0.183, 0.817, 0, 0\n                0,     0,     0,     1, 0"/>\n    </filter>\n    <filter id="achromatopsia">\n      <feColorMatrix\n        in="SourceGraphic"\n        type="matrix"\n        values="0.299, 0.587, 0.114, 0, 0\n                0.299, 0.587, 0.114, 0, 0\n                0.299, 0.587, 0.114, 0, 0\n                0,     0,     0,     1, 0"/>\n    </filter>\n    <filter id="achromatomaly">\n      <feColorMatrix\n        in="SourceGraphic"\n        type="matrix"\n        values="0.618, 0.320, 0.062, 0, 0\n                0.163, 0.775, 0.062, 0, 0\n                0.163, 0.320, 0.516, 0, 0\n                0,     0,     0,     1, 0"/>\n    </filter>\n  </defs>\n</svg>'}aplicarFiltro(t){null!=t?(this.active_filter?this.removeTests("colorBlindness"):this.toggleTest("colorBlindness",t),this.active_filter=!this.active_filter):console.error("Error al aplicar los filtros, la opcion no se pintada correctamente")}toggleTest(t,e){this.hasInsertedAccess||(this.insertFiles(this.svgFilterTemplate,this.cssFilter),this.hasInsertedAccess=!0),this.removeTests(t),document.documentElement.classList.add(e)}insertFiles(t,e){document.body.insertAdjacentHTML("beforeend",t),document.body.insertAdjacentHTML("beforeend",e)}removeTests(t){if("vision"==t)for(let t=0;t<this.visionClasses.length;t++)document.documentElement.classList.remove(this.visionClasses[t]);else if("colorBlindness"==t)for(let t=0;t<this.colorBlindnessClasses.length;t++)document.documentElement.classList.remove(this.colorBlindnessClasses[t])}}class e{static addFilterBufferStyleClass(){const t=document.styleSheets[0];t.insertRule("\n        .filter-list-buffer {\n            position: fixed;\n            top: 50%;\n            right: 20px;\n            transform: translateY(-50%);\n            z-index: 9999;\n            background-color: #FFFF00;\n            color: #000000;\n        }\n    ",t.cssRules.length)}static addFilterOptionsStyleClass(){const t=document.styleSheets[0];t.insertRule("\n        .filter-option {\n          padding: 0.5rem;\n        }\n    ",t.cssRules.length)}static addFilterStyleClass(){const t=document.styleSheets[0];t.insertRule("\n        .filter_button {\n          position: fixed;\n          top: 20px;\n          right: 20px;\n          width: 50px;\n          height: 50px;\n          border-radius: 50%;\n          background-color: #243c5a;\n          color: #ffffff;\n          text-align: center;\n          line-height: 50px;\n          cursor: pointer;\n          z-index: 9999;\n        }\n    ",t.cssRules.length)}}class s{constructor(s=!1){this.enableFilter=s,this.filterViewOn=!1,this.startFilter=t=>{const e=t.target;this.filterService.aplicarFiltro(e.textContent)},this.showFilterOptionsList=()=>{if(this.filterViewOn){var t=document.getElementById("filter_buffer");return null==t?void console.error("No hay instancia del buffer de opciones."):(t.remove(),void(this.filterViewOn=!this.filterViewOn))}var s=document.createElement("div");s.className="filter-list-buffer",s.id="filter_buffer";var i=document.getElementById("filter_button");null!=i?(i.appendChild(s),e.addFilterBufferStyleClass(),["protanopia","protanomaly","deuteranopia","deuteranomaly","tritanopia","tritanomaly","achromatopsia","achromatomaly","grayscale"].forEach((t=>{var e=document.getElementById("filter_buffer");null!=e?e.appendChild(this.buildFilterOption(t)):console.error("No hay instancia del buffer de opciones.")})),e.addFilterOptionsStyleClass(),this.filterViewOn=!this.filterViewOn):console.error("No se creo el boton correctamente.")},this.filterService=new t}status(){return this.enableFilter}toggleStatus(){this.enableFilter=!this.enableFilter}showFilterOptions(){const t=document.createElement("img");t.src="https://github.com/EyeeAssist/docs/blob/develop/src/assets/logo.png?raw=true",t.style.width="50px",t.style.borderRadius="50%";const s=document.createElement("div");s.className="filter_button",s.id="filter_button",s.appendChild(t),s.addEventListener("click",this.showFilterOptionsList),e.addFilterStyleClass(),document.body.appendChild(s)}buildFilterOption(t){var e=document.createElement("div");return e.className="filter-option",e.addEventListener("click",this.startFilter),e.textContent=t,e}}var i=function(t,e,s,i){return new(s||(s=Promise))((function(n,o){function a(t){try{l(i.next(t))}catch(t){o(t)}}function r(t){try{l(i.throw(t))}catch(t){o(t)}}function l(t){var e;t.done?n(t.value):(e=t.value,e instanceof s?e:new s((function(t){t(e)}))).then(a,r)}l((i=i.apply(t,e||[])).next())}))};class n{constructor(t=!1,e=""){var s;if(this.useScreenReader=t,this.token=e,this.synth=window.speechSynthesis,this.screenReaderStatus=!1,this.selectedArticle=null,this.selectedLink=null,this.articleIndex=-1,this.linkIndex=0,this.controller=new AbortController,this.talk=(t,e=!0)=>{!e||this.synth.cancel(),this.synth.speak(new SpeechSynthesisUtterance(t))},this.cancelTalk=()=>{this.controller&&this.controller.abort(),this.talk("")},!this.useScreenReader)return;let i=document.createElement("script");i.src="https://www.youtube.com/iframe_api";let n=document.getElementsByTagName("script")[0];null===(s=n.parentNode)||void 0===s||s.insertBefore(i,n)}status(){return this.useScreenReader}toggleStatus(){this.useScreenReader=!this.useScreenReader}enable(){return this.screenReaderStatus}sayWelcome(){this.talk("Hola bienvenido a la pagina X, si desea leer las acciones de la pagina presione control y enter")}sayGoodbay(){this.talk("Gracias por utilizar eyeeassist")}keybindsScreenReader(t){this.cancelReader(t),this.reRead(t),this.activeScreenReader(t),this.moveBetweenContent(t),this.moveBetweenLinks(t)}getImage(t){return i(this,void 0,void 0,(function*(){return yield fetch(t)}))}getDescription(t){return i(this,void 0,void 0,(function*(){this.controller=new AbortController;const e=new FormData;e.append("file",t,"imagen.jpg");const s={method:"POST",body:e,headers:{Authorization:"Bearer "+this.token},signal:this.controller.signal},i=yield fetch("http://localhost:8000/caption",s).catch((t=>{"AbortError"===t.name&&console.error(t)}));return null!=i?(yield i.json()).message[0]:""}))}readChilds(t){var e;return i(this,void 0,void 0,(function*(){if("IFRAME"==t.nodeName){var s=new YT.Player(t,{});setTimeout((()=>{s.playVideo()}),5e3)}if("IMG"==t.nodeName){this.talk("Imagen encontrada",!1);let e=t;if(""!=e.alt)this.talk(""),this.talk("Imagen de "+e.alt,!1);else{const t=yield this.getImage(e.src),s=yield t.blob();this.talk("describiendo imagen",!1);const i=yield this.getDescription(s);""!=i?this.talk("Imagen de "+i,!1):this.talk("No se pudo generar una descripcion para la imagen encontrada.",!1)}}t.nodeType==Node.TEXT_NODE&&(null===(e=t.textContent)||void 0===e?void 0:e.trim())&&this.talk(t.textContent,!1);for(const e of Array.from(t.childNodes))yield this.readChilds(e)}))}moveBetweenContent(t){let e=document.getElementsByTagName("article");0!=e.length&&(this.screenReaderStatus&&!0===t.ctrlKey&&"arrowright"===t.key.toLowerCase()&&(this.articleIndex+=1,this.selectedArticle=e[this.articleIndex],this.cancelTalk(),this.readChilds(this.selectedArticle),this.articleIndex===e.length-1&&(this.articleIndex=0)),this.screenReaderStatus&&!0===t.ctrlKey&&"arrowleft"===t.key.toLowerCase()&&(-1===this.articleIndex?this.articleIndex+=1:0==this.articleIndex?this.articleIndex=e.length-1:this.articleIndex-=1,this.selectedArticle=e[this.articleIndex],this.cancelTalk(),this.readChilds(this.selectedArticle)))}activeScreenReader(t){this.useScreenReader&&!0===t.ctrlKey&&" "===t.key.toLowerCase()&&(this.screenReaderStatus?this.sayGoodbay():this.sayWelcome(),this.screenReaderStatus=!this.screenReaderStatus)}moveBetweenLinks(t){if(this.screenReaderStatus&&!1===t.ctrlKey&&"enter"===t.key.toLowerCase()&&null!=this.selectedLink&&(console.log(this.selectedLink),this.selectedLink.click()),this.screenReaderStatus&&!0===t.ctrlKey&&"enter"===t.key.toLowerCase()){let t=document.getElementsByClassName("text_reader_link");console.log(t[this.linkIndex].tagName),this.selectedLink=t[this.linkIndex],this.selectedLink.focus(),"TEXTAREA"==t[this.linkIndex].tagName?(this.selectedLink.addEventListener("input",(()=>{console.log(this.selectedLink)})),this.talk("Seleccionado un text area",!0)):null!==this.selectedLink.textContent&&this.talk(this.selectedLink.textContent,!0),this.linkIndex===t.length-1?this.linkIndex=0:this.linkIndex+=1}}cancelReader(t){"escape"===t.key.toLowerCase()&&this.talk("")}reRead(t){!0===t.ctrlKey&&"backspace"===t.key.toLowerCase()&&null!=this.selectedArticle&&null!=this.selectedArticle.textContent&&this.talk(this.selectedArticle.textContent)}}class o{static addZoomMessageTextBoxClass(){const t=document.styleSheets[0];t.insertRule(".zoom-message-txtbox {  \n          display: flex;\n          align-items: center;\n          justify-content: center;\n          position: fixed;\n          top: 50%;\n          left: 50%;\n          transform: translate(-50%, -50%);\n          z-index: 9999;\n          background-color: #FFFF00;\n          color: #000000;\n          font-size: 20rem;\n          text-align: center;\n          width: 80%;\n          height: 80%;\n          font-family: Arial, sans-serif;\n      }",t.cssRules.length)}}class a{constructor(){this.TRANSITION_DURATION=800,this.level=1,this.mouseX=0,this.mouseY=0,this.panEngageTimeout=-1,this.panUpdateInterval=-1,this.callbackTimeout=-1,this.supportsTransforms="WebkitTransform"in document.body.style||"MozTransform"in document.body.style||"msTransform"in document.body.style||"OTransform"in document.body.style||"transform"in document.body.style,this.keyupEvent=t=>{1!==this.level&&27===t.keyCode&&this.out(void 0)},this.mouseMoveEvent=t=>{1!==this.level&&(this.mouseX=t.clientX,this.mouseY=t.clientY)},this.supportsTransforms&&(document.body.style.transition="transform "+this.TRANSITION_DURATION+"ms ease"),document.addEventListener("keyup",this.keyupEvent),document.addEventListener("mousemove",this.mouseMoveEvent)}magnify(t,e){var s=this.getScrollOffset();if(t.width=t.width||1,t.height=t.height||1,t.x-=(window.innerWidth-t.width*e)/2,t.y-=(window.innerHeight-t.height*e)/2,this.supportsTransforms)if(1===e)document.body.style.transform="";else{var i=s.x+"px "+s.y+"px",n="translate("+-t.x+"px,"+-t.y+"px) scale("+e+")";document.body.style.transformOrigin=i,document.body.style.transform=n}else 1===e?(document.body.style.position="",document.body.style.left="",document.body.style.top="",document.body.style.width="",document.body.style.height=""):(document.body.style.position="relative",document.body.style.left=-(s.x+t.x)/e+"px",document.body.style.top=-(s.y+t.y)/e+"px",document.body.style.width=100*e+"%",document.body.style.height=100*e+"%");this.level=e}pan(){var t=.12*window.innerWidth,e=.12*window.innerHeight,s=this.getScrollOffset();this.mouseY<e?window.scroll(s.x,s.y-(1-this.mouseY/e)*(14/this.level)):this.mouseY>window.innerHeight-e&&window.scroll(s.x,s.y+(1-(window.innerHeight-this.mouseY)/e)*(14/this.level)),this.mouseX<t?window.scroll(s.x-(1-this.mouseX/t)*(14/this.level),s.y):this.mouseX>window.innerWidth-t&&window.scroll(s.x+(1-(window.innerWidth-this.mouseX)/t)*(14/this.level),s.y)}getScrollOffset(){return{x:void 0!==window.scrollX?window.scrollX:window.pageXOffset,y:void 0!==window.scrollY?window.scrollY:window.pageYOffset}}to(t){if(1!==this.level)this.out(void 0);else{if(t.x=t.x||0,t.y=t.y||0,t.element){var e="number"==typeof t.padding?t.padding:20,s=t.element.getBoundingClientRect();t.x=s.left-e,t.y=s.top-e,t.width=s.width+2*e,t.height=s.height+2*e}void 0!==t.width&&void 0!==t.height&&(t.scale=Math.max(Math.min(window.innerWidth/t.width,window.innerHeight/t.height),1)),t.scale>1&&(t.x*=t.scale,t.y*=t.scale,t.x=Math.max(t.x,0),t.y=Math.max(t.y,0),this.magnify(t,t.scale),!1!==t.pan&&(this.panEngageTimeout=setTimeout(this.calculatePanUpdateInterval,this.TRANSITION_DURATION)),"function"==typeof t.callback&&(this.callbackTimeout=setTimeout(t.callback,this.TRANSITION_DURATION)))}}calculatePanUpdateInterval(){this.panUpdateInterval=setInterval(this.pan,1e3/60)}out(t){clearTimeout(this.panEngageTimeout),clearInterval(this.panUpdateInterval),clearTimeout(this.callbackTimeout),this.magnify(new r(0,0,1),1),t&&"function"==typeof t.callback&&setTimeout(t.callback,this.TRANSITION_DURATION),this.level=1}}class r{constructor(t,e,s){this.x=0,this.y=0,this.scale=0,this.x=t,this.y=e,this.scale=s}}class l{constructor(t=!1){this.enableZoomOptions=t,this.zoomStatus=!1,this.active_message='<div id="zoom-status" class="zoom-message-txtbox">On</div>',this.deactive_message='<div id="zoom-status" class="zoom-message-txtbox">Off</div>',this.toogleZoom=t=>{this.zoomService.to(new r(t.x,t.y,10))},this.zoomService=new a}status(){return this.enableZoomOptions}toogleStatus(){this.enableZoomOptions=!this.enableZoomOptions}activeZoom(t,e){this.enableZoomOptions&&(t||!0!==e.ctrlKey||"backspace"!==e.key.toLowerCase()||(o.addZoomMessageTextBoxClass(),this.initialClickEvent(document.body)))}initialClickEvent(t){this.zoomStatus?this.showBoxMessage(t,this.deactive_message,!this.zoomStatus):this.showBoxMessage(t,this.active_message,!this.zoomStatus),this.zoomStatus=!this.zoomStatus}showBoxMessage(t,e,s){t.insertAdjacentHTML("beforebegin",e),setTimeout((()=>{const t=document.getElementById("zoom-status");null==t||t.remove()}),2e3),s?t.addEventListener("click",this.toogleZoom):t.removeEventListener("click",this.toogleZoom)}}class c{static mainMessage(t){return t.style.display="flex",t.style.alignItems="center",t.style.alignContent="center",t.style.justifyItems="center",t.style.justifyContent="center",t.style.position="fixed",t.style.top="0",t.style.left="0",t.style.width="100%",t.style.backgroundColor="#f8f8f8",t.style.zIndex="999",t}static messageContent(t){return t.style.textAlign="center",t.style.flex="1",t}static closeButtom(t){return t.style.background="none",t.style.border="none",t.style.padding="0",t.style.margin="0",t.style.cursor="pointer",t.style.width="50px",t.style.height="50px",t.style.alignSelf="flex-end",t}static addFlyMenuStyle(){const t=document.styleSheets[0];t.insertRule("\n        .fly_menu {\n          position: fixed;\n          right: 70px;\n          width: 50px;\n          height: 50px;\n          border-radius: 50%;\n          background-color: #243c5a;\n          color: #ffffff;\n          fill: #ffffff;\n          stroke: #ffffff;\n          text-align: center;\n          line-height: 50px;\n          cursor: pointer;\n          z-index: 9999;\n        }\n    ",t.cssRules.length)}static svgHuman(t){const e=document.createElementNS("http://www.w3.org/2000/svg","svg");e.setAttribute("xmlns","http://www.w3.org/2000/svg"),e.setAttribute("viewBox","0 0 24 24"),e.setAttribute("fill","none"),e.setAttribute("stroke",t),e.setAttribute("stroke-width","2"),e.setAttribute("stroke-linecap","round"),e.setAttribute("stroke-linejoin","round");const s=document.createElementNS("http://www.w3.org/2000/svg","circle");s.setAttribute("cx","12"),s.setAttribute("cy","5"),s.setAttribute("r","1");const i=document.createElementNS("http://www.w3.org/2000/svg","path");i.setAttribute("d","M9 20l3-6 3 6");const n=document.createElementNS("http://www.w3.org/2000/svg","path");n.setAttribute("d","M6 8l6 2 6-2");const o=document.createElementNS("http://www.w3.org/2000/svg","path");return o.setAttribute("d","M12 10v4"),e.appendChild(s),e.appendChild(i),e.appendChild(n),e.appendChild(o),e}static svgCloseButtom(t){const e=document.createElementNS("http://www.w3.org/2000/svg","svg");e.setAttribute("fill",t),e.setAttribute("viewBox","0 0 32 32");const s=document.createElementNS("http://www.w3.org/2000/svg","path");return s.setAttribute("d","M7.004 23.087l7.08-7.081-7.07-7.071L8.929 7.02l7.067 7.069L23.084 7l1.912 1.913-7.089 7.093 7.075 7.077-1.912 1.913-7.074-7.073L8.917 25z"),e.appendChild(s),e}static addBufferOptionsClass(){const t=document.styleSheets[0];t.insertRule("\n        .buffer_options {\n            position: fixed;\n            top: 20%;\n            right: 10%;\n            border-radius: 10px;\n            transform: translateY(-50%);\n            z-index: 9999;\n            background-color: #243c5a;\n            color: #9dd08b;\n        }\n    ",t.cssRules.length)}static toggleSwitchClasses(){this.toogleSwitchClass(),this.toggleSwitchCircle(),this.toggleSwitchActive(),this.toggleSwitchAnimation()}static toogleSwitchClass(){const t=document.styleSheets[0];t.insertRule("\n        .toggle-switch {\n            width: 60px;\n            height: 30px;\n            background-color: #ccc;\n            border-radius: 15px;\n            display: flex;\n            align-items: center;\n            cursor: pointer;\n            transition: background-color 0.3s, transform 0.3s;\n        }\n    ",t.cssRules.length)}static toggleSwitchCircle(){const t=document.styleSheets[0];t.insertRule("\n        .toggle-switch-circle {\n            width: 30px;\n            height: 30px;\n            background-color: white;\n            border-radius: 50%;\n            transition: transform 0.3s;\n        }",t.cssRules.length)}static toggleSwitchActive(){const t=document.styleSheets[0];t.insertRule("\n        .toggle-switch.active {\n            background-color: #2ecc71;\n        }",t.cssRules.length)}static toggleSwitchAnimation(){const t=document.styleSheets[0];t.insertRule("\n        .toggle-switch.active .toggle-switch-circle {\n            transform: translateX(30px);\n        }",t.cssRules.length)}static addOptionFunctionsClass(){const t=document.styleSheets[0];t.insertRule("\n        .option_menu_eyeeassist {\n          display: flex;\n          padding: 10px;\n          justify-content: space-between;\n        }",t.cssRules.length)}}new class{constructor(t=!1,e=!1,i=!1,o=""){this.token=o,this.animacionEnProgreso=!1,this.initMessageClose=!1,this.viewOptionsOn=!1,this.buildOption=(t,e)=>{const s=document.createElement("div");s.className="option_menu_eyeeassist";const i=document.createElement("div");i.textContent=t,i.style.paddingRight="20px",s.appendChild(i);const n=document.createElement("div");n.className="toggle-switch",n.id="toggleSwitch"+t;const o=document.createElement("div");return o.className="toggle-switch-circle",n.appendChild(o),e&&n.classList.toggle("active"),n.addEventListener("click",(t=>{switch(n.id){case"toggleSwitchZoom":this.ZoomObject.toogleStatus(),localStorage.setItem("zoomStatus",JSON.stringify(this.ZoomObject.status()));break;case"toggleSwitchColors":this.FilterObject.toggleStatus(),localStorage.setItem("filterStatus",JSON.stringify(this.FilterObject.status()));break;case"toggleSwitchReader":this.ScreenReaderObject.toggleStatus(),localStorage.setItem("readerStatus",JSON.stringify(this.ScreenReaderObject.status()))}n.classList.toggle("active")})),s.appendChild(n),s},this.showOptions=()=>{if(console.log("Mostrando opciones"),this.viewOptionsOn){const t=document.getElementById("buffer_options");return null==t||t.remove(),void(this.viewOptionsOn=!this.viewOptionsOn)}const t=document.createElement("div");t.id="buffer_options",t.className="buffer_options",[{name:"Zoom",status:this.ZoomObject.status()},{name:"Colors",status:this.FilterObject.status()},{name:"Reader",status:this.ScreenReaderObject.status()}].forEach((e=>{t.appendChild(this.buildOption(e.name,e.status))})),document.body.appendChild(t),this.viewOptionsOn=!this.viewOptionsOn},this.cerrarModal=()=>{if(!this.animacionEnProgreso){const t=document.getElementById("eyeeasist-initial-message"),e=document.getElementById("fly_menu");this.animacionEnProgreso=!0;const s=null==t?void 0:t.animate([{opacity:1,transform:"translateY(0)"},{opacity:0,transform:"translateY(-100%)"}],{duration:300,easing:"ease-out"}),i=null==e?void 0:e.animate([{top:"70px"},{top:"30px"}],{duration:1e3,easing:"ease"});s&&i&&(s.onfinish=()=>{t&&(t.style.display="none"),this.animacionEnProgreso=!1,localStorage.setItem("initMessageClose","true")},i.onfinish=()=>{e&&(e.style.top="30px")})}},"true"==localStorage.getItem("initMessageClose")&&(this.initMessageClose=!0),c.toggleSwitchClasses(),c.addBufferOptionsClass(),c.addFlyMenuStyle(),c.addOptionFunctionsClass(),this.zoomStatus=t,this.filterStatus=e,this.readerStatus=i;const a=localStorage.getItem("zoomStatus");a&&(console.log("Hay zoom status guardado",JSON.parse(a)),this.zoomStatus=JSON.parse(a));const r=localStorage.getItem("filterStatus");r&&(console.log("Hay filter status guardado",JSON.parse(r)),this.filterStatus=JSON.parse(r));const d=localStorage.getItem("readerStatus");d&&(console.log("Hay reader status guardado",JSON.parse(d)),this.readerStatus=JSON.parse(d)),this.ZoomObject=new l(this.zoomStatus),this.FilterObject=new s(this.filterStatus),this.ScreenReaderObject=new n(this.readerStatus,this.token)}start(){this.showInitMessage(),this.showFlyMenu(),document.addEventListener("keydown",(t=>{console.log(t.key),this.ZoomObject.activeZoom(this.ScreenReaderObject.enable(),t),this.ScreenReaderObject.keybindsScreenReader(t)}))}showFlyMenu(){const t=document.createElement("div");t.id="fly_menu",t.className="fly_menu",t.style.top=this.initMessageClose?"30px":"70px",t.appendChild(c.svgHuman("#9dd08b")),t.addEventListener("click",this.showOptions),document.body.appendChild(t)}showInitMessage(){let t=document.createElement("div");t=c.mainMessage(t),t.id="eyeeasist-initial-message",this.initMessageClose&&(t.style.display="none");let e=document.createElement("div");e=c.messageContent(e);let s=document.createElement("span");s.textContent="Mensaje de accesibilidad";let i=document.createElement("button");i=c.closeButtom(i),i.addEventListener("click",this.cerrarModal),i.appendChild(c.svgCloseButtom("#000000")),e.appendChild(s),t.appendChild(e),t.appendChild(i),document.body.insertBefore(t,document.body.firstChild)}}(!0,!0,!0).start()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
=======
(()=>{"use strict";class e{constructor(){this.hasInsertedAccess=!1,this.active_filter=!1,this.colorBlindnessClasses=["protanopia","protanomaly","deuteranopia","deuteranomaly","tritanopia","tritanomaly","achromatopsia","achromatomaly","grayscale"],this.visionClasses=["vision-loss-moderate","vision-loss-severe","vision-blindness"],this.cssFilter="\n  <style>.protanopia{-webkit-filter:url(#protanopia) grayscale(0)!important;filter:url(#protanopia) grayscale(0)!important}.protanomaly{-webkit-filter:url(#protanomaly) grayscale(0)!important;filter:url(#protanomaly) grayscale(0)!important}.deuteranopia{-webkit-filter:url(#deuteranopia) grayscale(0)!important;filter:url(#deuteranopia) grayscale(0)!important}.deuteranomaly{-webkit-filter:url(#deuteranomaly) grayscale(0)!important;filter:url(#deuteranomaly) grayscale(0)!important}.tritanopia{-webkit-filter:url(#tritanopia) grayscale(0)!important;filter:url(#tritanopia) grayscale(0)!important}.tritanomaly{-webkit-filter:url(#tritanomaly) grayscale(0)!important;filter:url(#tritanomaly) grayscale(0)!important}.achromatopsia{-webkit-filter:url(#achromatopsia) grayscale(0)!important;filter:url(#achromatopsia) grayscale(0)!important}.achromatomaly{-webkit-filter:url(#achromatomaly) grayscale(0)!important;filter:url(#achromatomaly) grayscale(0)!important}.grayscale{-webkit-filter:grayscale(100%)!important;filter:grayscale(100%)!important}.vision-loss-moderate body>*{-webkit-filter:blur(1px)!important;filter:blur(1px)!important}.vision-loss-severe body>*{-webkit-filter:blur(10px)!important;filter:blur(10px)!important}.vision-blindness body>*{background-color:#fff!important;-webkit-filter:brightness(0)!important;filter:brightness(0)!important}#access-filter{border:0;clip:rect(1px,1px,1px,1px);-webkit-clip-path:inset(50%);clip-path:inset(50%);height:1px;margin:-1px;width:1px;overflow:hidden;position:absolute!important;word-wrap:normal!important}</style>",this.svgFilterTemplate='<svg \n  id="access-filter"\n  aria-hidden="true"\n  xmlns="http://www.w3.org/2000/svg"\n  version="1.1">\n  <defs>\n    <filter id="protanopia">\n      <feColorMatrix\n        in="SourceGraphic"\n        type="matrix"\n        values="0.567, 0.433, 0,     0, 0\n                0.558, 0.442, 0,     0, 0\n                0,     0.242, 0.758, 0, 0\n                0,     0,     0,     1, 0"/>\n    </filter>\n    <filter id="protanomaly">\n      <feColorMatrix\n        in="SourceGraphic"\n        type="matrix"\n        values="0.817, 0.183, 0,     0, 0\n                0.333, 0.667, 0,     0, 0\n                0,     0.125, 0.875, 0, 0\n                0,     0,     0,     1, 0"/>\n    </filter>\n    <filter id="deuteranopia">\n      <feColorMatrix\n        in="SourceGraphic"\n        type="matrix"\n        values="0.625, 0.375, 0,   0, 0\n                0.7,   0.3,   0,   0, 0\n                0,     0.3,   0.7, 0, 0\n                0,     0,     0,   1, 0"/>\n    </filter>\n    <filter id="deuteranomaly">\n      <feColorMatrix\n        in="SourceGraphic"\n        type="matrix"\n        values="0.8,   0.2,   0,     0, 0\n                0.258, 0.742, 0,     0, 0\n                0,     0.142, 0.858, 0, 0\n                0,     0,     0,     1, 0"/>\n    </filter>\n    <filter id="tritanopia">\n      <feColorMatrix\n        in="SourceGraphic"\n        type="matrix"\n        values="0.95, 0.05,  0,     0, 0\n                0,    0.433, 0.567, 0, 0\n                0,    0.475, 0.525, 0, 0\n                0,    0,     0,     1, 0"/>\n    </filter>\n    <filter id="tritanomaly">\n      <feColorMatrix\n        in="SourceGraphic"\n        type="matrix"\n        values="0.967, 0.033, 0,     0, 0\n                0,     0.733, 0.267, 0, 0\n                0,     0.183, 0.817, 0, 0\n                0,     0,     0,     1, 0"/>\n    </filter>\n    <filter id="achromatopsia">\n      <feColorMatrix\n        in="SourceGraphic"\n        type="matrix"\n        values="0.299, 0.587, 0.114, 0, 0\n                0.299, 0.587, 0.114, 0, 0\n                0.299, 0.587, 0.114, 0, 0\n                0,     0,     0,     1, 0"/>\n    </filter>\n    <filter id="achromatomaly">\n      <feColorMatrix\n        in="SourceGraphic"\n        type="matrix"\n        values="0.618, 0.320, 0.062, 0, 0\n                0.163, 0.775, 0.062, 0, 0\n                0.163, 0.320, 0.516, 0, 0\n                0,     0,     0,     1, 0"/>\n    </filter>\n  </defs>\n</svg>'}aplicarFiltro(e){null!=e?(this.active_filter?this.removeTests("colorBlindness"):this.toggleTest("colorBlindness",e),this.active_filter=!this.active_filter):console.error("Error al aplicar los filtros, la opcion no se pintada correctamente")}toggleTest(e,t){this.hasInsertedAccess||(this.insertFiles(this.svgFilterTemplate,this.cssFilter),this.hasInsertedAccess=!0),this.removeTests(e),document.documentElement.classList.add(t)}insertFiles(e,t){document.body.insertAdjacentHTML("beforeend",e),document.body.insertAdjacentHTML("beforeend",t)}removeTests(e){if("vision"==e)for(let e=0;e<this.visionClasses.length;e++)document.documentElement.classList.remove(this.visionClasses[e]);else if("colorBlindness"==e)for(let e=0;e<this.colorBlindnessClasses.length;e++)document.documentElement.classList.remove(this.colorBlindnessClasses[e])}}class t{static addFilterBufferStyleClass(){const e=document.styleSheets[0];e.insertRule("\n        .filter-list-buffer {\n            position: fixed;\n            top: 50%;\n            right: 20px;\n            transform: translateY(-50%);\n            z-index: 9999;\n            background-color: #FFFF00;\n            color: #000000;\n        }\n    ",e.cssRules.length)}static addFilterOptionsStyleClass(){const e=document.styleSheets[0];e.insertRule("\n        .filter-option {\n          padding: 0.5rem;\n        }\n    ",e.cssRules.length)}static addFilterStyleClass(){const e=document.styleSheets[0];e.insertRule("\n        .filter_button {\n          position: fixed;\n          top: 20px;\n          right: 20px;\n          width: 50px;\n          height: 50px;\n          border-radius: 50%;\n          background-color: #243c5a;\n          color: #ffffff;\n          text-align: center;\n          line-height: 50px;\n          cursor: pointer;\n          z-index: 9999;\n        }\n    ",e.cssRules.length)}}class i{static addZoomMessageTextBoxClass(){const e=document.styleSheets[0];e.insertRule(".zoom-message-txtbox {  \n          display: flex;\n          align-items: center;\n          justify-content: center;\n          position: fixed;\n          top: 50%;\n          left: 50%;\n          transform: translate(-50%, -50%);\n          z-index: 9999;\n          background-color: #FFFF00;\n          color: #000000;\n          font-size: 20rem;\n          text-align: center;\n          width: 80%;\n          height: 80%;\n          font-family: Arial, sans-serif;\n      }",e.cssRules.length)}}class s{constructor(){this.TRANSITION_DURATION=800,this.level=1,this.mouseX=0,this.mouseY=0,this.panEngageTimeout=-1,this.panUpdateInterval=-1,this.callbackTimeout=-1,this.supportsTransforms="WebkitTransform"in document.body.style||"MozTransform"in document.body.style||"msTransform"in document.body.style||"OTransform"in document.body.style||"transform"in document.body.style,this.keyupEvent=e=>{1!==this.level&&27===e.keyCode&&this.out(void 0)},this.mouseMoveEvent=e=>{1!==this.level&&(this.mouseX=e.clientX,this.mouseY=e.clientY)},this.supportsTransforms&&(document.body.style.transition="transform "+this.TRANSITION_DURATION+"ms ease"),document.addEventListener("keyup",this.keyupEvent),document.addEventListener("mousemove",this.mouseMoveEvent)}magnify(e,t){var i=this.getScrollOffset();if(e.width=e.width||1,e.height=e.height||1,e.x-=(window.innerWidth-e.width*t)/2,e.y-=(window.innerHeight-e.height*t)/2,this.supportsTransforms)if(1===t)document.body.style.transform="";else{var s=i.x+"px "+i.y+"px",n="translate("+-e.x+"px,"+-e.y+"px) scale("+t+")";document.body.style.transformOrigin=s,document.body.style.transform=n}else 1===t?(document.body.style.position="",document.body.style.left="",document.body.style.top="",document.body.style.width="",document.body.style.height=""):(document.body.style.position="relative",document.body.style.left=-(i.x+e.x)/t+"px",document.body.style.top=-(i.y+e.y)/t+"px",document.body.style.width=100*t+"%",document.body.style.height=100*t+"%");this.level=t}pan(){var e=.12*window.innerWidth,t=.12*window.innerHeight,i=this.getScrollOffset();this.mouseY<t?window.scroll(i.x,i.y-(1-this.mouseY/t)*(14/this.level)):this.mouseY>window.innerHeight-t&&window.scroll(i.x,i.y+(1-(window.innerHeight-this.mouseY)/t)*(14/this.level)),this.mouseX<e?window.scroll(i.x-(1-this.mouseX/e)*(14/this.level),i.y):this.mouseX>window.innerWidth-e&&window.scroll(i.x+(1-(window.innerWidth-this.mouseX)/e)*(14/this.level),i.y)}getScrollOffset(){return{x:void 0!==window.scrollX?window.scrollX:window.pageXOffset,y:void 0!==window.scrollY?window.scrollY:window.pageYOffset}}to(e){if(1!==this.level)this.out(void 0);else{if(e.x=e.x||0,e.y=e.y||0,e.element){var t="number"==typeof e.padding?e.padding:20,i=e.element.getBoundingClientRect();e.x=i.left-t,e.y=i.top-t,e.width=i.width+2*t,e.height=i.height+2*t}void 0!==e.width&&void 0!==e.height&&(e.scale=Math.max(Math.min(window.innerWidth/e.width,window.innerHeight/e.height),1)),e.scale>1&&(e.x*=e.scale,e.y*=e.scale,e.x=Math.max(e.x,0),e.y=Math.max(e.y,0),this.magnify(e,e.scale),!1!==e.pan&&(this.panEngageTimeout=setTimeout(this.calculatePanUpdateInterval,this.TRANSITION_DURATION)),"function"==typeof e.callback&&(this.callbackTimeout=setTimeout(e.callback,this.TRANSITION_DURATION)))}}calculatePanUpdateInterval(){this.panUpdateInterval=setInterval(this.pan,1e3/60)}out(e){clearTimeout(this.panEngageTimeout),clearInterval(this.panUpdateInterval),clearTimeout(this.callbackTimeout),this.magnify(new n(0,0,1),1),e&&"function"==typeof e.callback&&setTimeout(e.callback,this.TRANSITION_DURATION),this.level=1}}class n{constructor(e,t,i){this.x=0,this.y=0,this.scale=0,this.x=e,this.y=t,this.scale=i}}const o=new class{constructor(e=!1){this.enableZoomOptions=e,this.zoomStatus=!1,this.active_message='<div id="zoom-status" class="zoom-message-txtbox">On</div>',this.deactive_message='<div id="zoom-status" class="zoom-message-txtbox">Off</div>',this.toogleZoom=e=>{this.zoomService.to(new n(e.x,e.y,10))},this.zoomService=new s}activeZoom(e,t){this.enableZoomOptions&&(e||!0!==t.ctrlKey||"backspace"!==t.key.toLowerCase()||(i.addZoomMessageTextBoxClass(),this.initialClickEvent(document.body)))}initialClickEvent(e){this.zoomStatus?this.showBoxMessage(e,this.deactive_message,!this.zoomStatus):this.showBoxMessage(e,this.active_message,!this.zoomStatus),this.zoomStatus=!this.zoomStatus}showBoxMessage(e,t,i){e.insertAdjacentHTML("beforebegin",t),setTimeout((()=>{const e=document.getElementById("zoom-status");null==e||e.remove()}),2e3),i?e.addEventListener("click",this.toogleZoom):e.removeEventListener("click",this.toogleZoom)}}(!0),a=(new class{constructor(i=!1){this.enableFilter=i,this.filterViewOn=!1,this.startFilter=e=>{const t=e.target;this.filterService.aplicarFiltro(t.textContent)},this.showFilterOptionsList=()=>{if(this.filterViewOn){var e=document.getElementById("filter_buffer");return null==e?void console.error("No hay instancia del buffer de opciones."):(e.remove(),void(this.filterViewOn=!this.filterViewOn))}var i=document.createElement("div");i.className="filter-list-buffer",i.id="filter_buffer";var s=document.getElementById("filter_button");null!=s?(s.appendChild(i),t.addFilterBufferStyleClass(),["protanopia","protanomaly","deuteranopia","deuteranomaly","tritanopia","tritanomaly","achromatopsia","achromatomaly","grayscale"].forEach((e=>{var t=document.getElementById("filter_buffer");null!=t?t.appendChild(this.buildFilterOption(e)):console.error("No hay instancia del buffer de opciones.")})),t.addFilterOptionsStyleClass(),this.filterViewOn=!this.filterViewOn):console.error("No se creo el boton correctamente.")},this.filterService=new e,this.showFilterOptions()}showFilterOptions(){const e=document.createElement("img");e.src="https://github.com/EyeeAssist/docs/blob/develop/src/assets/logo.png?raw=true",e.style.width="50px",e.style.borderRadius="50%";const i=document.createElement("div");i.className="filter_button",i.id="filter_button",i.appendChild(e),i.addEventListener("click",this.showFilterOptionsList),t.addFilterStyleClass(),document.body.appendChild(i)}buildFilterOption(e){var t=document.createElement("div");return t.className="filter-option",t.addEventListener("click",this.startFilter),t.textContent=e,t}}(!0),new class{constructor(e=!1){this.useScreenReader=e,this.synth=window.speechSynthesis,this.screenReaderStatus=!1,this.selectedArticle=null,this.selectedLink=null,this.articleIndex=-1,this.linkIndex=0,this.talk=(e,t=!0)=>{!t||this.synth.cancel(),this.synth.speak(new SpeechSynthesisUtterance(e))},this.useScreenReader}status(){return this.screenReaderStatus}sayWelcome(){this.talk("Hola bienvenido a la pagina X, si desea leer las acciones de la pagina presione control y enter")}sayGoodbay(){this.talk("Gracias por utilizar eyeeassist")}keybindsScreenReader(e){this.cancelReader(e),this.reRead(e),this.activeScreenReader(e),this.moveBetweenContent(e),this.moveBetweenLinks(e)}moveBetweenContent(e){let t=document.getElementsByTagName("article");0!=t.length&&(this.screenReaderStatus&&!0===e.ctrlKey&&"arrowright"===e.key.toLowerCase()&&(this.articleIndex+=1,this.selectedArticle=t[this.articleIndex],null!=this.selectedArticle.textContent&&(this.selectedArticle.focus(),this.talk(this.selectedArticle.textContent)),this.articleIndex===t.length-1&&(this.articleIndex=0)),this.screenReaderStatus&&!0===e.ctrlKey&&"arrowleft"===e.key.toLowerCase()&&(-1===this.articleIndex?this.articleIndex+=1:0==this.articleIndex?this.articleIndex=t.length-1:this.articleIndex-=1,this.selectedArticle=t[this.articleIndex],null!=this.selectedArticle.textContent&&(this.selectedArticle.focus(),this.talk(this.selectedArticle.textContent))))}activeScreenReader(e){!0===e.ctrlKey&&" "===e.key.toLowerCase()&&(this.screenReaderStatus?this.sayGoodbay():this.sayWelcome(),this.screenReaderStatus=!this.screenReaderStatus)}moveBetweenLinks(e){if(this.screenReaderStatus&&!1===e.ctrlKey&&"enter"===e.key.toLowerCase()&&null!=this.selectedLink&&(console.log(this.selectedLink),this.selectedLink.click()),this.screenReaderStatus&&!0===e.ctrlKey&&"enter"===e.key.toLowerCase()){let e=document.getElementsByClassName("text_reader_link");console.log(e[this.linkIndex].tagName),this.selectedLink=e[this.linkIndex],this.selectedLink.focus(),"TEXTAREA"==e[this.linkIndex].tagName?(this.selectedLink.addEventListener("input",(()=>{console.log(this.selectedLink)})),this.talk("Seleccionado un text area",!0)):null!==this.selectedLink.textContent&&this.talk(this.selectedLink.textContent,!0),this.linkIndex===e.length-1?this.linkIndex=0:this.linkIndex+=1}}cancelReader(e){"escape"===e.key.toLowerCase()&&this.talk("")}reRead(e){!0===e.ctrlKey&&"backspace"===e.key.toLowerCase()&&null!=this.selectedArticle&&null!=this.selectedArticle.textContent&&this.talk(this.selectedArticle.textContent)}}(!0));document.addEventListener("keydown",(e=>{console.log(e.key),o.activeZoom(a.status(),e),a.keybindsScreenReader(e)}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
>>>>>>> 5d5fe53 ([deploy] Compilado prod)
