(()=>{"use strict";class e{constructor(){this.hasInsertedAccess=!1,this.active_filter=!1,this.colorBlindnessClasses=["protanopia","protanomaly","deuteranopia","deuteranomaly","tritanopia","tritanomaly","achromatopsia","achromatomaly","grayscale"],this.visionClasses=["vision-loss-moderate","vision-loss-severe","vision-blindness"],this.cssFilter="\n  <style>.protanopia{-webkit-filter:url(#protanopia) grayscale(0)!important;filter:url(#protanopia) grayscale(0)!important}.protanomaly{-webkit-filter:url(#protanomaly) grayscale(0)!important;filter:url(#protanomaly) grayscale(0)!important}.deuteranopia{-webkit-filter:url(#deuteranopia) grayscale(0)!important;filter:url(#deuteranopia) grayscale(0)!important}.deuteranomaly{-webkit-filter:url(#deuteranomaly) grayscale(0)!important;filter:url(#deuteranomaly) grayscale(0)!important}.tritanopia{-webkit-filter:url(#tritanopia) grayscale(0)!important;filter:url(#tritanopia) grayscale(0)!important}.tritanomaly{-webkit-filter:url(#tritanomaly) grayscale(0)!important;filter:url(#tritanomaly) grayscale(0)!important}.achromatopsia{-webkit-filter:url(#achromatopsia) grayscale(0)!important;filter:url(#achromatopsia) grayscale(0)!important}.achromatomaly{-webkit-filter:url(#achromatomaly) grayscale(0)!important;filter:url(#achromatomaly) grayscale(0)!important}.grayscale{-webkit-filter:grayscale(100%)!important;filter:grayscale(100%)!important}.vision-loss-moderate body>*{-webkit-filter:blur(1px)!important;filter:blur(1px)!important}.vision-loss-severe body>*{-webkit-filter:blur(10px)!important;filter:blur(10px)!important}.vision-blindness body>*{background-color:#fff!important;-webkit-filter:brightness(0)!important;filter:brightness(0)!important}#access-filter{border:0;clip:rect(1px,1px,1px,1px);-webkit-clip-path:inset(50%);clip-path:inset(50%);height:1px;margin:-1px;width:1px;overflow:hidden;position:absolute!important;word-wrap:normal!important}</style>",this.svgFilterTemplate='<svg \n  id="access-filter"\n  aria-hidden="true"\n  xmlns="http://www.w3.org/2000/svg"\n  version="1.1">\n  <defs>\n    <filter id="protanopia">\n      <feColorMatrix\n        in="SourceGraphic"\n        type="matrix"\n        values="0.567, 0.433, 0,     0, 0\n                0.558, 0.442, 0,     0, 0\n                0,     0.242, 0.758, 0, 0\n                0,     0,     0,     1, 0"/>\n    </filter>\n    <filter id="protanomaly">\n      <feColorMatrix\n        in="SourceGraphic"\n        type="matrix"\n        values="0.817, 0.183, 0,     0, 0\n                0.333, 0.667, 0,     0, 0\n                0,     0.125, 0.875, 0, 0\n                0,     0,     0,     1, 0"/>\n    </filter>\n    <filter id="deuteranopia">\n      <feColorMatrix\n        in="SourceGraphic"\n        type="matrix"\n        values="0.625, 0.375, 0,   0, 0\n                0.7,   0.3,   0,   0, 0\n                0,     0.3,   0.7, 0, 0\n                0,     0,     0,   1, 0"/>\n    </filter>\n    <filter id="deuteranomaly">\n      <feColorMatrix\n        in="SourceGraphic"\n        type="matrix"\n        values="0.8,   0.2,   0,     0, 0\n                0.258, 0.742, 0,     0, 0\n                0,     0.142, 0.858, 0, 0\n                0,     0,     0,     1, 0"/>\n    </filter>\n    <filter id="tritanopia">\n      <feColorMatrix\n        in="SourceGraphic"\n        type="matrix"\n        values="0.95, 0.05,  0,     0, 0\n                0,    0.433, 0.567, 0, 0\n                0,    0.475, 0.525, 0, 0\n                0,    0,     0,     1, 0"/>\n    </filter>\n    <filter id="tritanomaly">\n      <feColorMatrix\n        in="SourceGraphic"\n        type="matrix"\n        values="0.967, 0.033, 0,     0, 0\n                0,     0.733, 0.267, 0, 0\n                0,     0.183, 0.817, 0, 0\n                0,     0,     0,     1, 0"/>\n    </filter>\n    <filter id="achromatopsia">\n      <feColorMatrix\n        in="SourceGraphic"\n        type="matrix"\n        values="0.299, 0.587, 0.114, 0, 0\n                0.299, 0.587, 0.114, 0, 0\n                0.299, 0.587, 0.114, 0, 0\n                0,     0,     0,     1, 0"/>\n    </filter>\n    <filter id="achromatomaly">\n      <feColorMatrix\n        in="SourceGraphic"\n        type="matrix"\n        values="0.618, 0.320, 0.062, 0, 0\n                0.163, 0.775, 0.062, 0, 0\n                0.163, 0.320, 0.516, 0, 0\n                0,     0,     0,     1, 0"/>\n    </filter>\n  </defs>\n</svg>'}aplicarFiltro(e){null!=e?(this.active_filter?this.removeTests("colorBlindness"):this.toggleTest("colorBlindness",e),this.active_filter=!this.active_filter):console.error("Error al aplicar los filtros, la opcion no se pintada correctamente")}toggleTest(e,t){this.hasInsertedAccess||(this.insertFiles(this.svgFilterTemplate,this.cssFilter),this.hasInsertedAccess=!0),this.removeTests(e),document.documentElement.classList.add(t)}insertFiles(e,t){document.body.insertAdjacentHTML("beforeend",e),document.body.insertAdjacentHTML("beforeend",t)}removeTests(e){if("vision"==e)for(let e=0;e<this.visionClasses.length;e++)document.documentElement.classList.remove(this.visionClasses[e]);else if("colorBlindness"==e)for(let e=0;e<this.colorBlindnessClasses.length;e++)document.documentElement.classList.remove(this.colorBlindnessClasses[e])}}class t{static addFilterBufferStyleClass(){const e=document.styleSheets[0];e.insertRule("\n        .filter-list-buffer {\n            position: fixed;\n            top: 50%;\n            right: 20px;\n            transform: translateY(-50%);\n            z-index: 9999;\n            background-color: #FFFF00;\n            color: #000000;\n        }\n    ",e.cssRules.length)}static addFilterOptionsStyleClass(){const e=document.styleSheets[0];e.insertRule("\n        .filter-option {\n          padding: 0.5rem;\n        }\n    ",e.cssRules.length)}static addFilterStyleClass(){const e=document.styleSheets[0];e.insertRule("\n        .filter_button {\n          position: fixed;\n          top: 20px;\n          right: 20px;\n          width: 50px;\n          height: 50px;\n          border-radius: 50%;\n          background-color: #243c5a;\n          color: #ffffff;\n          text-align: center;\n          line-height: 50px;\n          cursor: pointer;\n          z-index: 9999;\n        }\n    ",e.cssRules.length)}}var i=function(e,t,i,s){return new(i||(i=Promise))((function(n,o){function a(e){try{l(s.next(e))}catch(e){o(e)}}function r(e){try{l(s.throw(e))}catch(e){o(e)}}function l(e){var t;e.done?n(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(a,r)}l((s=s.apply(e,t||[])).next())}))};class s{static addZoomMessageTextBoxClass(){const e=document.styleSheets[0];e.insertRule(".zoom-message-txtbox {  \n          display: flex;\n          align-items: center;\n          justify-content: center;\n          position: fixed;\n          top: 50%;\n          left: 50%;\n          transform: translate(-50%, -50%);\n          z-index: 9999;\n          background-color: #FFFF00;\n          color: #000000;\n          font-size: 20rem;\n          text-align: center;\n          width: 80%;\n          height: 80%;\n          font-family: Arial, sans-serif;\n      }",e.cssRules.length)}}class n{constructor(){this.TRANSITION_DURATION=800,this.level=1,this.mouseX=0,this.mouseY=0,this.panEngageTimeout=-1,this.panUpdateInterval=-1,this.callbackTimeout=-1,this.supportsTransforms="WebkitTransform"in document.body.style||"MozTransform"in document.body.style||"msTransform"in document.body.style||"OTransform"in document.body.style||"transform"in document.body.style,this.keyupEvent=e=>{1!==this.level&&27===e.keyCode&&this.out(void 0)},this.mouseMoveEvent=e=>{1!==this.level&&(this.mouseX=e.clientX,this.mouseY=e.clientY)},this.supportsTransforms&&(document.body.style.transition="transform "+this.TRANSITION_DURATION+"ms ease"),document.addEventListener("keyup",this.keyupEvent),document.addEventListener("mousemove",this.mouseMoveEvent)}magnify(e,t){var i=this.getScrollOffset();if(e.width=e.width||1,e.height=e.height||1,e.x-=(window.innerWidth-e.width*t)/2,e.y-=(window.innerHeight-e.height*t)/2,this.supportsTransforms)if(1===t)document.body.style.transform="";else{var s=i.x+"px "+i.y+"px",n="translate("+-e.x+"px,"+-e.y+"px) scale("+t+")";document.body.style.transformOrigin=s,document.body.style.transform=n}else 1===t?(document.body.style.position="",document.body.style.left="",document.body.style.top="",document.body.style.width="",document.body.style.height=""):(document.body.style.position="relative",document.body.style.left=-(i.x+e.x)/t+"px",document.body.style.top=-(i.y+e.y)/t+"px",document.body.style.width=100*t+"%",document.body.style.height=100*t+"%");this.level=t}pan(){var e=.12*window.innerWidth,t=.12*window.innerHeight,i=this.getScrollOffset();this.mouseY<t?window.scroll(i.x,i.y-(1-this.mouseY/t)*(14/this.level)):this.mouseY>window.innerHeight-t&&window.scroll(i.x,i.y+(1-(window.innerHeight-this.mouseY)/t)*(14/this.level)),this.mouseX<e?window.scroll(i.x-(1-this.mouseX/e)*(14/this.level),i.y):this.mouseX>window.innerWidth-e&&window.scroll(i.x+(1-(window.innerWidth-this.mouseX)/e)*(14/this.level),i.y)}getScrollOffset(){return{x:void 0!==window.scrollX?window.scrollX:window.pageXOffset,y:void 0!==window.scrollY?window.scrollY:window.pageYOffset}}to(e){if(1!==this.level)this.out(void 0);else{if(e.x=e.x||0,e.y=e.y||0,e.element){var t="number"==typeof e.padding?e.padding:20,i=e.element.getBoundingClientRect();e.x=i.left-t,e.y=i.top-t,e.width=i.width+2*t,e.height=i.height+2*t}void 0!==e.width&&void 0!==e.height&&(e.scale=Math.max(Math.min(window.innerWidth/e.width,window.innerHeight/e.height),1)),e.scale>1&&(e.x*=e.scale,e.y*=e.scale,e.x=Math.max(e.x,0),e.y=Math.max(e.y,0),this.magnify(e,e.scale),!1!==e.pan&&(this.panEngageTimeout=setTimeout(this.calculatePanUpdateInterval,this.TRANSITION_DURATION)),"function"==typeof e.callback&&(this.callbackTimeout=setTimeout(e.callback,this.TRANSITION_DURATION)))}}calculatePanUpdateInterval(){this.panUpdateInterval=setInterval(this.pan,1e3/60)}out(e){clearTimeout(this.panEngageTimeout),clearInterval(this.panUpdateInterval),clearTimeout(this.callbackTimeout),this.magnify(new o(0,0,1),1),e&&"function"==typeof e.callback&&setTimeout(e.callback,this.TRANSITION_DURATION),this.level=1}}class o{constructor(e,t,i){this.x=0,this.y=0,this.scale=0,this.x=e,this.y=t,this.scale=i}}const a=new class{constructor(e=!1){this.enableZoomOptions=e,this.zoomStatus=!1,this.active_message='<div id="zoom-status" class="zoom-message-txtbox">On</div>',this.deactive_message='<div id="zoom-status" class="zoom-message-txtbox">Off</div>',this.toogleZoom=e=>{this.zoomService.to(new o(e.x,e.y,10))},this.zoomService=new n}activeZoom(e,t){this.enableZoomOptions&&(e||!0!==t.ctrlKey||"backspace"!==t.key.toLowerCase()||(s.addZoomMessageTextBoxClass(),this.initialClickEvent(document.body)))}initialClickEvent(e){this.zoomStatus?this.showBoxMessage(e,this.deactive_message,!this.zoomStatus):this.showBoxMessage(e,this.active_message,!this.zoomStatus),this.zoomStatus=!this.zoomStatus}showBoxMessage(e,t,i){e.insertAdjacentHTML("beforebegin",t),setTimeout((()=>{const e=document.getElementById("zoom-status");null==e||e.remove()}),2e3),i?e.addEventListener("click",this.toogleZoom):e.removeEventListener("click",this.toogleZoom)}}(!0),r=(new class{constructor(i=!1){this.enableFilter=i,this.filterViewOn=!1,this.startFilter=e=>{const t=e.target;this.filterService.aplicarFiltro(t.textContent)},this.showFilterOptionsList=()=>{if(this.filterViewOn){var e=document.getElementById("filter_buffer");return null==e?void console.error("No hay instancia del buffer de opciones."):(e.remove(),void(this.filterViewOn=!this.filterViewOn))}var i=document.createElement("div");i.className="filter-list-buffer",i.id="filter_buffer";var s=document.getElementById("filter_button");null!=s?(s.appendChild(i),t.addFilterBufferStyleClass(),["protanopia","protanomaly","deuteranopia","deuteranomaly","tritanopia","tritanomaly","achromatopsia","achromatomaly","grayscale"].forEach((e=>{var t=document.getElementById("filter_buffer");null!=t?t.appendChild(this.buildFilterOption(e)):console.error("No hay instancia del buffer de opciones.")})),t.addFilterOptionsStyleClass(),this.filterViewOn=!this.filterViewOn):console.error("No se creo el boton correctamente.")},this.filterService=new e,this.showFilterOptions()}showFilterOptions(){const e=document.createElement("img");e.src="https://github.com/EyeeAssist/docs/blob/develop/src/assets/logo.png?raw=true",e.style.width="50px",e.style.borderRadius="50%";const i=document.createElement("div");i.className="filter_button",i.id="filter_button",i.appendChild(e),i.addEventListener("click",this.showFilterOptionsList),t.addFilterStyleClass(),document.body.appendChild(i)}buildFilterOption(e){var t=document.createElement("div");return t.className="filter-option",t.addEventListener("click",this.startFilter),t.textContent=e,t}}(!0),new class{constructor(e=!1,t=""){var i;if(this.useScreenReader=e,this.token=t,this.synth=window.speechSynthesis,this.screenReaderStatus=!1,this.selectedArticle=null,this.selectedLink=null,this.articleIndex=-1,this.linkIndex=0,this.controller=new AbortController,this.talk=(e,t=!0)=>{!t||this.synth.cancel(),this.synth.speak(new SpeechSynthesisUtterance(e))},this.cancelTalk=()=>{this.controller&&this.controller.abort(),this.talk("")},!this.useScreenReader)return;let s=document.createElement("script");s.src="https://www.youtube.com/iframe_api";let n=document.getElementsByTagName("script")[0];null===(i=n.parentNode)||void 0===i||i.insertBefore(s,n)}status(){return this.screenReaderStatus}sayWelcome(){this.talk("Hola bienvenido a la pagina X, si desea leer las acciones de la pagina presione control y enter")}sayGoodbay(){this.talk("Gracias por utilizar eyeeassist")}keybindsScreenReader(e){this.cancelReader(e),this.reRead(e),this.activeScreenReader(e),this.moveBetweenContent(e),this.moveBetweenLinks(e)}getImage(e){return i(this,void 0,void 0,(function*(){return yield fetch(e)}))}getDescription(e){return i(this,void 0,void 0,(function*(){this.controller=new AbortController;const t=new FormData;t.append("file",e,"imagen.jpg");const i={method:"POST",body:t,headers:{Authorization:"Bearer "+this.token},signal:this.controller.signal},s=yield fetch("http://localhost:8000/caption",i).catch((e=>{"AbortError"===e.name&&console.error(e)}));return null!=s?(yield s.json()).message[0]:""}))}readChilds(e){var t;return i(this,void 0,void 0,(function*(){let i=e;if("video_player_eyeeassist"==i.className){var s=new YT.Player(i.id,{videoId:i.id});setTimeout((()=>{s.playVideo()}),5e3)}if("IMG"==e.nodeName){this.talk("Imagen encontrada",!1);let t=e;if(""!=t.alt)this.talk(""),this.talk("Imagen de "+t.alt,!1);else{const e=yield this.getImage(t.src),i=yield e.blob();this.talk("describiendo imagen",!1);const s=yield this.getDescription(i);""!=s?this.talk("Imagen de "+s,!1):this.talk("No se pudo generar una descripcion para la imagen encontrada.",!1)}}e.nodeType==Node.TEXT_NODE&&(null===(t=e.textContent)||void 0===t?void 0:t.trim())&&this.talk(e.textContent,!1);for(const t of Array.from(e.childNodes))yield this.readChilds(t)}))}moveBetweenContent(e){let t=document.getElementsByTagName("article");0!=t.length&&(this.screenReaderStatus&&!0===e.ctrlKey&&"arrowright"===e.key.toLowerCase()&&(this.articleIndex+=1,this.selectedArticle=t[this.articleIndex],this.cancelTalk(),this.readChilds(this.selectedArticle),this.articleIndex===t.length-1&&(this.articleIndex=0)),this.screenReaderStatus&&!0===e.ctrlKey&&"arrowleft"===e.key.toLowerCase()&&(-1===this.articleIndex?this.articleIndex+=1:0==this.articleIndex?this.articleIndex=t.length-1:this.articleIndex-=1,this.selectedArticle=t[this.articleIndex],this.cancelTalk(),this.readChilds(this.selectedArticle)))}activeScreenReader(e){!0===e.ctrlKey&&" "===e.key.toLowerCase()&&(this.screenReaderStatus?this.sayGoodbay():this.sayWelcome(),this.screenReaderStatus=!this.screenReaderStatus)}moveBetweenLinks(e){if(this.screenReaderStatus&&!1===e.ctrlKey&&"enter"===e.key.toLowerCase()&&null!=this.selectedLink&&(console.log(this.selectedLink),this.selectedLink.click()),this.screenReaderStatus&&!0===e.ctrlKey&&"enter"===e.key.toLowerCase()){let e=document.getElementsByClassName("text_reader_link");console.log(e[this.linkIndex].tagName),this.selectedLink=e[this.linkIndex],this.selectedLink.focus(),"TEXTAREA"==e[this.linkIndex].tagName?(this.selectedLink.addEventListener("input",(()=>{console.log(this.selectedLink)})),this.talk("Seleccionado un text area",!0)):null!==this.selectedLink.textContent&&this.talk(this.selectedLink.textContent,!0),this.linkIndex===e.length-1?this.linkIndex=0:this.linkIndex+=1}}cancelReader(e){"escape"===e.key.toLowerCase()&&this.talk("")}reRead(e){!0===e.ctrlKey&&"backspace"===e.key.toLowerCase()&&null!=this.selectedArticle&&null!=this.selectedArticle.textContent&&this.talk(this.selectedArticle.textContent)}}(!0,"akljnv13bvi2vfo0b0bw"));document.addEventListener("keydown",(e=>{console.log(e.key),a.activeZoom(r.status(),e),r.keybindsScreenReader(e)}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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YUFBYSxHQUc3Qy9JLEtBQUsySyxZQUFjNEQsRUFBTTlNLE9BQVMsRUFDbEN6QixLQUFLMkssVUFBWSxFQUdqQjNLLEtBQUsySyxXQUFhLENBRTFCLENBQ0osQ0FDQSxZQUFBa0IsQ0FBYTNILEdBQ3VCLFdBQTVCQSxFQUFNNkQsSUFBSUMsZUFDVmhJLEtBQUs4SyxLQUFLLEdBRWxCLENBQ0EsTUFBQWdCLENBQU81SCxJQUNtQixJQUFsQkEsRUFBTTRELFNBQWdELGNBQTVCNUQsRUFBTTZELElBQUlDLGVBQ1IsTUFBeEJoSSxLQUFLd0ssaUJBQ21DLE1BQXBDeEssS0FBS3dLLGdCQUFnQnpCLGFBQ3JCL0ksS0FBSzhLLEtBQUs5SyxLQUFLd0ssZ0JBQWdCekIsWUFJL0MsSUd2TndDLEVBQU0seUJBQ2xEL0gsU0FBUzBELGlCQUFpQixXQUFZUixJQUNsQ3ZELFFBQVEwTixJQUFJbkssRUFBTTZELEtBQ2xCVixFQUFXTyxXQUFXWSxFQUFtQkosU0FBVWxFLEdBQ25Ec0UsRUFBbUJvRCxxQkFBcUIxSCxFQUFNLEciLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9leWVhc3Npc3QtbGlicmFyeS8uL3NyYy9maWx0ZXIvZmlsdGVyLW1vZHVsZS9maWx0ZXJfc2VydmljZS50cyIsIndlYnBhY2s6Ly9leWVhc3Npc3QtbGlicmFyeS8uL3NyYy9maWx0ZXIvc3R5bGVzL2Nzcy1maWx0ZXItY2xhc3Nlcy50cyIsIndlYnBhY2s6Ly9leWVhc3Npc3QtbGlicmFyeS8uL3NyYy9zY3JlZW5fcmVhZGVyL3NjcmVlbl9yZWFkZXIudHMiLCJ3ZWJwYWNrOi8vZXllYXNzaXN0LWxpYnJhcnkvLi9zcmMvem9vbS9zdHlsZXMvY3NzLXpvb20tY2xhc3Nlcy50cyIsIndlYnBhY2s6Ly9leWVhc3Npc3QtbGlicmFyeS8uL3NyYy96b29tL3pvb20tbW9kdWxlL3pvb21fc2VydmljZS50cyIsIndlYnBhY2s6Ly9leWVhc3Npc3QtbGlicmFyeS8uL3NyYy9hcHAudHMiLCJ3ZWJwYWNrOi8vZXllYXNzaXN0LWxpYnJhcnkvLi9zcmMvem9vbS96b29tLnRzIiwid2VicGFjazovL2V5ZWFzc2lzdC1saWJyYXJ5Ly4vc3JjL2ZpbHRlci9maWx0ZXIudHMiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNsYXNzIEZpbHRlclNlcnZpY2Uge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLmhhc0luc2VydGVkQWNjZXNzID0gZmFsc2U7XG4gICAgICAgIHRoaXMuYWN0aXZlX2ZpbHRlciA9IGZhbHNlO1xuICAgICAgICB0aGlzLmNvbG9yQmxpbmRuZXNzQ2xhc3NlcyA9IFtcbiAgICAgICAgICAgIFwicHJvdGFub3BpYVwiLFxuICAgICAgICAgICAgXCJwcm90YW5vbWFseVwiLFxuICAgICAgICAgICAgXCJkZXV0ZXJhbm9waWFcIixcbiAgICAgICAgICAgIFwiZGV1dGVyYW5vbWFseVwiLFxuICAgICAgICAgICAgXCJ0cml0YW5vcGlhXCIsXG4gICAgICAgICAgICBcInRyaXRhbm9tYWx5XCIsXG4gICAgICAgICAgICBcImFjaHJvbWF0b3BzaWFcIixcbiAgICAgICAgICAgIFwiYWNocm9tYXRvbWFseVwiLFxuICAgICAgICAgICAgXCJncmF5c2NhbGVcIlxuICAgICAgICBdO1xuICAgICAgICB0aGlzLnZpc2lvbkNsYXNzZXMgPSBbXG4gICAgICAgICAgICBcInZpc2lvbi1sb3NzLW1vZGVyYXRlXCIsXG4gICAgICAgICAgICBcInZpc2lvbi1sb3NzLXNldmVyZVwiLFxuICAgICAgICAgICAgXCJ2aXNpb24tYmxpbmRuZXNzXCJcbiAgICAgICAgXTtcbiAgICAgICAgdGhpcy5jc3NGaWx0ZXIgPSBgXHJcbiAgPHN0eWxlPi5wcm90YW5vcGlhey13ZWJraXQtZmlsdGVyOnVybCgjcHJvdGFub3BpYSkgZ3JheXNjYWxlKDApIWltcG9ydGFudDtmaWx0ZXI6dXJsKCNwcm90YW5vcGlhKSBncmF5c2NhbGUoMCkhaW1wb3J0YW50fS5wcm90YW5vbWFseXstd2Via2l0LWZpbHRlcjp1cmwoI3Byb3Rhbm9tYWx5KSBncmF5c2NhbGUoMCkhaW1wb3J0YW50O2ZpbHRlcjp1cmwoI3Byb3Rhbm9tYWx5KSBncmF5c2NhbGUoMCkhaW1wb3J0YW50fS5kZXV0ZXJhbm9waWF7LXdlYmtpdC1maWx0ZXI6dXJsKCNkZXV0ZXJhbm9waWEpIGdyYXlzY2FsZSgwKSFpbXBvcnRhbnQ7ZmlsdGVyOnVybCgjZGV1dGVyYW5vcGlhKSBncmF5c2NhbGUoMCkhaW1wb3J0YW50fS5kZXV0ZXJhbm9tYWx5ey13ZWJraXQtZmlsdGVyOnVybCgjZGV1dGVyYW5vbWFseSkgZ3JheXNjYWxlKDApIWltcG9ydGFudDtmaWx0ZXI6dXJsKCNkZXV0ZXJhbm9tYWx5KSBncmF5c2NhbGUoMCkhaW1wb3J0YW50fS50cml0YW5vcGlhey13ZWJraXQtZmlsdGVyOnVybCgjdHJpdGFub3BpYSkgZ3JheXNjYWxlKDApIWltcG9ydGFudDtmaWx0ZXI6dXJsKCN0cml0YW5vcGlhKSBncmF5c2NhbGUoMCkhaW1wb3J0YW50fS50cml0YW5vbWFseXstd2Via2l0LWZpbHRlcjp1cmwoI3RyaXRhbm9tYWx5KSBncmF5c2NhbGUoMCkhaW1wb3J0YW50O2ZpbHRlcjp1cmwoI3RyaXRhbm9tYWx5KSBncmF5c2NhbGUoMCkhaW1wb3J0YW50fS5hY2hyb21hdG9wc2lhey13ZWJraXQtZmlsdGVyOnVybCgjYWNocm9tYXRvcHNpYSkgZ3JheXNjYWxlKDApIWltcG9ydGFudDtmaWx0ZXI6dXJsKCNhY2hyb21hdG9wc2lhKSBncmF5c2NhbGUoMCkhaW1wb3J0YW50fS5hY2hyb21hdG9tYWx5ey13ZWJraXQtZmlsdGVyOnVybCgjYWNocm9tYXRvbWFseSkgZ3JheXNjYWxlKDApIWltcG9ydGFudDtmaWx0ZXI6dXJsKCNhY2hyb21hdG9tYWx5KSBncmF5c2NhbGUoMCkhaW1wb3J0YW50fS5ncmF5c2NhbGV7LXdlYmtpdC1maWx0ZXI6Z3JheXNjYWxlKDEwMCUpIWltcG9ydGFudDtmaWx0ZXI6Z3JheXNjYWxlKDEwMCUpIWltcG9ydGFudH0udmlzaW9uLWxvc3MtbW9kZXJhdGUgYm9keT4qey13ZWJraXQtZmlsdGVyOmJsdXIoMXB4KSFpbXBvcnRhbnQ7ZmlsdGVyOmJsdXIoMXB4KSFpbXBvcnRhbnR9LnZpc2lvbi1sb3NzLXNldmVyZSBib2R5Pip7LXdlYmtpdC1maWx0ZXI6Ymx1cigxMHB4KSFpbXBvcnRhbnQ7ZmlsdGVyOmJsdXIoMTBweCkhaW1wb3J0YW50fS52aXNpb24tYmxpbmRuZXNzIGJvZHk+KntiYWNrZ3JvdW5kLWNvbG9yOiNmZmYhaW1wb3J0YW50Oy13ZWJraXQtZmlsdGVyOmJyaWdodG5lc3MoMCkhaW1wb3J0YW50O2ZpbHRlcjpicmlnaHRuZXNzKDApIWltcG9ydGFudH0jYWNjZXNzLWZpbHRlcntib3JkZXI6MDtjbGlwOnJlY3QoMXB4LDFweCwxcHgsMXB4KTstd2Via2l0LWNsaXAtcGF0aDppbnNldCg1MCUpO2NsaXAtcGF0aDppbnNldCg1MCUpO2hlaWdodDoxcHg7bWFyZ2luOi0xcHg7d2lkdGg6MXB4O292ZXJmbG93OmhpZGRlbjtwb3NpdGlvbjphYnNvbHV0ZSFpbXBvcnRhbnQ7d29yZC13cmFwOm5vcm1hbCFpbXBvcnRhbnR9PC9zdHlsZT5gO1xuICAgICAgICB0aGlzLnN2Z0ZpbHRlclRlbXBsYXRlID0gYDxzdmcgXHJcbiAgaWQ9XCJhY2Nlc3MtZmlsdGVyXCJcclxuICBhcmlhLWhpZGRlbj1cInRydWVcIlxyXG4gIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIlxyXG4gIHZlcnNpb249XCIxLjFcIj5cclxuICA8ZGVmcz5cclxuICAgIDxmaWx0ZXIgaWQ9XCJwcm90YW5vcGlhXCI+XHJcbiAgICAgIDxmZUNvbG9yTWF0cml4XHJcbiAgICAgICAgaW49XCJTb3VyY2VHcmFwaGljXCJcclxuICAgICAgICB0eXBlPVwibWF0cml4XCJcclxuICAgICAgICB2YWx1ZXM9XCIwLjU2NywgMC40MzMsIDAsICAgICAwLCAwXHJcbiAgICAgICAgICAgICAgICAwLjU1OCwgMC40NDIsIDAsICAgICAwLCAwXHJcbiAgICAgICAgICAgICAgICAwLCAgICAgMC4yNDIsIDAuNzU4LCAwLCAwXHJcbiAgICAgICAgICAgICAgICAwLCAgICAgMCwgICAgIDAsICAgICAxLCAwXCIvPlxyXG4gICAgPC9maWx0ZXI+XHJcbiAgICA8ZmlsdGVyIGlkPVwicHJvdGFub21hbHlcIj5cclxuICAgICAgPGZlQ29sb3JNYXRyaXhcclxuICAgICAgICBpbj1cIlNvdXJjZUdyYXBoaWNcIlxyXG4gICAgICAgIHR5cGU9XCJtYXRyaXhcIlxyXG4gICAgICAgIHZhbHVlcz1cIjAuODE3LCAwLjE4MywgMCwgICAgIDAsIDBcclxuICAgICAgICAgICAgICAgIDAuMzMzLCAwLjY2NywgMCwgICAgIDAsIDBcclxuICAgICAgICAgICAgICAgIDAsICAgICAwLjEyNSwgMC44NzUsIDAsIDBcclxuICAgICAgICAgICAgICAgIDAsICAgICAwLCAgICAgMCwgICAgIDEsIDBcIi8+XHJcbiAgICA8L2ZpbHRlcj5cclxuICAgIDxmaWx0ZXIgaWQ9XCJkZXV0ZXJhbm9waWFcIj5cclxuICAgICAgPGZlQ29sb3JNYXRyaXhcclxuICAgICAgICBpbj1cIlNvdXJjZUdyYXBoaWNcIlxyXG4gICAgICAgIHR5cGU9XCJtYXRyaXhcIlxyXG4gICAgICAgIHZhbHVlcz1cIjAuNjI1LCAwLjM3NSwgMCwgICAwLCAwXHJcbiAgICAgICAgICAgICAgICAwLjcsICAgMC4zLCAgIDAsICAgMCwgMFxyXG4gICAgICAgICAgICAgICAgMCwgICAgIDAuMywgICAwLjcsIDAsIDBcclxuICAgICAgICAgICAgICAgIDAsICAgICAwLCAgICAgMCwgICAxLCAwXCIvPlxyXG4gICAgPC9maWx0ZXI+XHJcbiAgICA8ZmlsdGVyIGlkPVwiZGV1dGVyYW5vbWFseVwiPlxyXG4gICAgICA8ZmVDb2xvck1hdHJpeFxyXG4gICAgICAgIGluPVwiU291cmNlR3JhcGhpY1wiXHJcbiAgICAgICAgdHlwZT1cIm1hdHJpeFwiXHJcbiAgICAgICAgdmFsdWVzPVwiMC44LCAgIDAuMiwgICAwLCAgICAgMCwgMFxyXG4gICAgICAgICAgICAgICAgMC4yNTgsIDAuNzQyLCAwLCAgICAgMCwgMFxyXG4gICAgICAgICAgICAgICAgMCwgICAgIDAuMTQyLCAwLjg1OCwgMCwgMFxyXG4gICAgICAgICAgICAgICAgMCwgICAgIDAsICAgICAwLCAgICAgMSwgMFwiLz5cclxuICAgIDwvZmlsdGVyPlxyXG4gICAgPGZpbHRlciBpZD1cInRyaXRhbm9waWFcIj5cclxuICAgICAgPGZlQ29sb3JNYXRyaXhcclxuICAgICAgICBpbj1cIlNvdXJjZUdyYXBoaWNcIlxyXG4gICAgICAgIHR5cGU9XCJtYXRyaXhcIlxyXG4gICAgICAgIHZhbHVlcz1cIjAuOTUsIDAuMDUsICAwLCAgICAgMCwgMFxyXG4gICAgICAgICAgICAgICAgMCwgICAgMC40MzMsIDAuNTY3LCAwLCAwXHJcbiAgICAgICAgICAgICAgICAwLCAgICAwLjQ3NSwgMC41MjUsIDAsIDBcclxuICAgICAgICAgICAgICAgIDAsICAgIDAsICAgICAwLCAgICAgMSwgMFwiLz5cclxuICAgIDwvZmlsdGVyPlxyXG4gICAgPGZpbHRlciBpZD1cInRyaXRhbm9tYWx5XCI+XHJcbiAgICAgIDxmZUNvbG9yTWF0cml4XHJcbiAgICAgICAgaW49XCJTb3VyY2VHcmFwaGljXCJcclxuICAgICAgICB0eXBlPVwibWF0cml4XCJcclxuICAgICAgICB2YWx1ZXM9XCIwLjk2NywgMC4wMzMsIDAsICAgICAwLCAwXHJcbiAgICAgICAgICAgICAgICAwLCAgICAgMC43MzMsIDAuMjY3LCAwLCAwXHJcbiAgICAgICAgICAgICAgICAwLCAgICAgMC4xODMsIDAuODE3LCAwLCAwXHJcbiAgICAgICAgICAgICAgICAwLCAgICAgMCwgICAgIDAsICAgICAxLCAwXCIvPlxyXG4gICAgPC9maWx0ZXI+XHJcbiAgICA8ZmlsdGVyIGlkPVwiYWNocm9tYXRvcHNpYVwiPlxyXG4gICAgICA8ZmVDb2xvck1hdHJpeFxyXG4gICAgICAgIGluPVwiU291cmNlR3JhcGhpY1wiXHJcbiAgICAgICAgdHlwZT1cIm1hdHJpeFwiXHJcbiAgICAgICAgdmFsdWVzPVwiMC4yOTksIDAuNTg3LCAwLjExNCwgMCwgMFxyXG4gICAgICAgICAgICAgICAgMC4yOTksIDAuNTg3LCAwLjExNCwgMCwgMFxyXG4gICAgICAgICAgICAgICAgMC4yOTksIDAuNTg3LCAwLjExNCwgMCwgMFxyXG4gICAgICAgICAgICAgICAgMCwgICAgIDAsICAgICAwLCAgICAgMSwgMFwiLz5cclxuICAgIDwvZmlsdGVyPlxyXG4gICAgPGZpbHRlciBpZD1cImFjaHJvbWF0b21hbHlcIj5cclxuICAgICAgPGZlQ29sb3JNYXRyaXhcclxuICAgICAgICBpbj1cIlNvdXJjZUdyYXBoaWNcIlxyXG4gICAgICAgIHR5cGU9XCJtYXRyaXhcIlxyXG4gICAgICAgIHZhbHVlcz1cIjAuNjE4LCAwLjMyMCwgMC4wNjIsIDAsIDBcclxuICAgICAgICAgICAgICAgIDAuMTYzLCAwLjc3NSwgMC4wNjIsIDAsIDBcclxuICAgICAgICAgICAgICAgIDAuMTYzLCAwLjMyMCwgMC41MTYsIDAsIDBcclxuICAgICAgICAgICAgICAgIDAsICAgICAwLCAgICAgMCwgICAgIDEsIDBcIi8+XHJcbiAgICA8L2ZpbHRlcj5cclxuICA8L2RlZnM+XHJcbjwvc3ZnPmA7XG4gICAgfVxuICAgIGFwbGljYXJGaWx0cm8oZmlsdHJvKSB7XG4gICAgICAgIGlmIChmaWx0cm8gPT0gbnVsbCkge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgYWwgYXBsaWNhciBsb3MgZmlsdHJvcywgbGEgb3BjaW9uIG5vIHNlIHBpbnRhZGEgY29ycmVjdGFtZW50ZScpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmICghdGhpcy5hY3RpdmVfZmlsdGVyKSB7XG4gICAgICAgICAgICB0aGlzLnRvZ2dsZVRlc3QoXCJjb2xvckJsaW5kbmVzc1wiLCBmaWx0cm8pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5yZW1vdmVUZXN0cyhcImNvbG9yQmxpbmRuZXNzXCIpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuYWN0aXZlX2ZpbHRlciA9ICF0aGlzLmFjdGl2ZV9maWx0ZXI7XG4gICAgfVxuICAgIHRvZ2dsZVRlc3QodGVzdFR5cGUsIHRlc3RDbGFzcykge1xuICAgICAgICBpZiAoIXRoaXMuaGFzSW5zZXJ0ZWRBY2Nlc3MpIHtcbiAgICAgICAgICAgIHRoaXMuaW5zZXJ0RmlsZXModGhpcy5zdmdGaWx0ZXJUZW1wbGF0ZSwgdGhpcy5jc3NGaWx0ZXIpO1xuICAgICAgICAgICAgdGhpcy5oYXNJbnNlcnRlZEFjY2VzcyA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5yZW1vdmVUZXN0cyh0ZXN0VHlwZSk7XG4gICAgICAgIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGFzc0xpc3QuYWRkKHRlc3RDbGFzcyk7XG4gICAgfVxuICAgIGluc2VydEZpbGVzKHN2ZywgY3NzKSB7XG4gICAgICAgIGRvY3VtZW50LmJvZHkuaW5zZXJ0QWRqYWNlbnRIVE1MKFwiYmVmb3JlZW5kXCIsIHN2Zyk7XG4gICAgICAgIGRvY3VtZW50LmJvZHkuaW5zZXJ0QWRqYWNlbnRIVE1MKFwiYmVmb3JlZW5kXCIsIGNzcyk7XG4gICAgfVxuICAgIHJlbW92ZVRlc3RzKHRlc3RUeXBlKSB7XG4gICAgICAgIGlmICh0ZXN0VHlwZSA9PSBcInZpc2lvblwiKSB7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMudmlzaW9uQ2xhc3Nlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKHRoaXMudmlzaW9uQ2xhc3Nlc1tpXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodGVzdFR5cGUgPT0gXCJjb2xvckJsaW5kbmVzc1wiKSB7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuY29sb3JCbGluZG5lc3NDbGFzc2VzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUodGhpcy5jb2xvckJsaW5kbmVzc0NsYXNzZXNbaV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufVxuIiwiZXhwb3J0IGNsYXNzIENzc0ZpbHRlckNsYXNzZXMge1xuICAgIHN0YXRpYyBhZGRGaWx0ZXJCdWZmZXJTdHlsZUNsYXNzKCkge1xuICAgICAgICBjb25zdCBzdHlsZVNoZWV0ID0gZG9jdW1lbnQuc3R5bGVTaGVldHNbMF07IC8vIEFzZWfDunJhdGUgZGUgc2VsZWNjaW9uYXIgZWwgc3R5bGVzaGVldCBhZGVjdWFkb1xuICAgICAgICBjb25zdCBmaWx0ZXJfYnVmZmVyID0gYFxyXG4gICAgICAgIC5maWx0ZXItbGlzdC1idWZmZXIge1xyXG4gICAgICAgICAgICBwb3NpdGlvbjogZml4ZWQ7XHJcbiAgICAgICAgICAgIHRvcDogNTAlO1xyXG4gICAgICAgICAgICByaWdodDogMjBweDtcclxuICAgICAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVZKC01MCUpO1xyXG4gICAgICAgICAgICB6LWluZGV4OiA5OTk5O1xyXG4gICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjRkZGRjAwO1xyXG4gICAgICAgICAgICBjb2xvcjogIzAwMDAwMDtcclxuICAgICAgICB9XHJcbiAgICBgO1xuICAgICAgICBzdHlsZVNoZWV0Lmluc2VydFJ1bGUoZmlsdGVyX2J1ZmZlciwgc3R5bGVTaGVldC5jc3NSdWxlcy5sZW5ndGgpO1xuICAgIH1cbiAgICBzdGF0aWMgYWRkRmlsdGVyT3B0aW9uc1N0eWxlQ2xhc3MoKSB7XG4gICAgICAgIGNvbnN0IHN0eWxlU2hlZXQgPSBkb2N1bWVudC5zdHlsZVNoZWV0c1swXTsgLy8gQXNlZ8O6cmF0ZSBkZSBzZWxlY2Npb25hciBlbCBzdHlsZXNoZWV0IGFkZWN1YWRvXG4gICAgICAgIGNvbnN0IGZpbHRlcl9vcHRpb24gPSBgXHJcbiAgICAgICAgLmZpbHRlci1vcHRpb24ge1xyXG4gICAgICAgICAgcGFkZGluZzogMC41cmVtO1xyXG4gICAgICAgIH1cclxuICAgIGA7XG4gICAgICAgIHN0eWxlU2hlZXQuaW5zZXJ0UnVsZShmaWx0ZXJfb3B0aW9uLCBzdHlsZVNoZWV0LmNzc1J1bGVzLmxlbmd0aCk7XG4gICAgfVxuICAgIHN0YXRpYyBhZGRGaWx0ZXJTdHlsZUNsYXNzKCkge1xuICAgICAgICBjb25zdCBzdHlsZVNoZWV0ID0gZG9jdW1lbnQuc3R5bGVTaGVldHNbMF07IC8vIEFzZWfDunJhdGUgZGUgc2VsZWNjaW9uYXIgZWwgc3R5bGVzaGVldCBhZGVjdWFkb1xuICAgICAgICBjb25zdCBmaWx0ZXJfYnV0dG9uID0gYFxyXG4gICAgICAgIC5maWx0ZXJfYnV0dG9uIHtcclxuICAgICAgICAgIHBvc2l0aW9uOiBmaXhlZDtcclxuICAgICAgICAgIHRvcDogMjBweDtcclxuICAgICAgICAgIHJpZ2h0OiAyMHB4O1xyXG4gICAgICAgICAgd2lkdGg6IDUwcHg7XHJcbiAgICAgICAgICBoZWlnaHQ6IDUwcHg7XHJcbiAgICAgICAgICBib3JkZXItcmFkaXVzOiA1MCU7XHJcbiAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMjQzYzVhO1xyXG4gICAgICAgICAgY29sb3I6ICNmZmZmZmY7XHJcbiAgICAgICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XHJcbiAgICAgICAgICBsaW5lLWhlaWdodDogNTBweDtcclxuICAgICAgICAgIGN1cnNvcjogcG9pbnRlcjtcclxuICAgICAgICAgIHotaW5kZXg6IDk5OTk7XHJcbiAgICAgICAgfVxyXG4gICAgYDtcbiAgICAgICAgc3R5bGVTaGVldC5pbnNlcnRSdWxlKGZpbHRlcl9idXR0b24sIHN0eWxlU2hlZXQuY3NzUnVsZXMubGVuZ3RoKTtcbiAgICB9XG59XG4iLCJ2YXIgX19hd2FpdGVyID0gKHRoaXMgJiYgdGhpcy5fX2F3YWl0ZXIpIHx8IGZ1bmN0aW9uICh0aGlzQXJnLCBfYXJndW1lbnRzLCBQLCBnZW5lcmF0b3IpIHtcbiAgICBmdW5jdGlvbiBhZG9wdCh2YWx1ZSkgeyByZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBQID8gdmFsdWUgOiBuZXcgUChmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXNvbHZlKHZhbHVlKTsgfSk7IH1cbiAgICByZXR1cm4gbmV3IChQIHx8IChQID0gUHJvbWlzZSkpKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgZnVuY3Rpb24gZnVsZmlsbGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yLm5leHQodmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxuICAgICAgICBmdW5jdGlvbiByZWplY3RlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvcltcInRocm93XCJdKHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cbiAgICAgICAgZnVuY3Rpb24gc3RlcChyZXN1bHQpIHsgcmVzdWx0LmRvbmUgPyByZXNvbHZlKHJlc3VsdC52YWx1ZSkgOiBhZG9wdChyZXN1bHQudmFsdWUpLnRoZW4oZnVsZmlsbGVkLCByZWplY3RlZCk7IH1cbiAgICAgICAgc3RlcCgoZ2VuZXJhdG9yID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMgfHwgW10pKS5uZXh0KCkpO1xuICAgIH0pO1xufTtcbmV4cG9ydCBjbGFzcyBTY3JlZW5SZWFkZXIge1xuICAgIGNvbnN0cnVjdG9yKHVzZVNjcmVlblJlYWRlciA9IGZhbHNlLCB0b2tlbiA9IFwiXCIpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICB0aGlzLnVzZVNjcmVlblJlYWRlciA9IHVzZVNjcmVlblJlYWRlcjtcbiAgICAgICAgdGhpcy50b2tlbiA9IHRva2VuO1xuICAgICAgICB0aGlzLnN5bnRoID0gd2luZG93LnNwZWVjaFN5bnRoZXNpcztcbiAgICAgICAgdGhpcy5zY3JlZW5SZWFkZXJTdGF0dXMgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5zZWxlY3RlZEFydGljbGUgPSBudWxsO1xuICAgICAgICB0aGlzLnNlbGVjdGVkTGluayA9IG51bGw7XG4gICAgICAgIHRoaXMuYXJ0aWNsZUluZGV4ID0gLTE7XG4gICAgICAgIHRoaXMubGlua0luZGV4ID0gMDtcbiAgICAgICAgdGhpcy5jb250cm9sbGVyID0gbmV3IEFib3J0Q29udHJvbGxlcjtcbiAgICAgICAgdGhpcy50YWxrID0gKHRleHQsIGNhbmNlbCA9IHRydWUpID0+IHtcbiAgICAgICAgICAgIGNhbmNlbCA/IHRoaXMuc3ludGguY2FuY2VsKCkgOiBcIiBcIjtcbiAgICAgICAgICAgIHRoaXMuc3ludGguc3BlYWsobmV3IFNwZWVjaFN5bnRoZXNpc1V0dGVyYW5jZSh0ZXh0KSk7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuY2FuY2VsVGFsayA9ICgpID0+IHtcbiAgICAgICAgICAgIGlmICh0aGlzLmNvbnRyb2xsZXIpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmNvbnRyb2xsZXIuYWJvcnQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMudGFsayhcIlwiKTtcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKCF0aGlzLnVzZVNjcmVlblJlYWRlcikge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGxldCB0YWcgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKTtcbiAgICAgICAgdGFnLnNyYyA9IFwiaHR0cHM6Ly93d3cueW91dHViZS5jb20vaWZyYW1lX2FwaVwiO1xuICAgICAgICBsZXQgZmlyc3RTY3JpcHRUYWcgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnc2NyaXB0JylbMF07XG4gICAgICAgIChfYSA9IGZpcnN0U2NyaXB0VGFnLnBhcmVudE5vZGUpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5pbnNlcnRCZWZvcmUodGFnLCBmaXJzdFNjcmlwdFRhZyk7XG4gICAgfVxuICAgIHN0YXR1cygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc2NyZWVuUmVhZGVyU3RhdHVzO1xuICAgIH1cbiAgICBzYXlXZWxjb21lKCkge1xuICAgICAgICB0aGlzLnRhbGsoXCJIb2xhIGJpZW52ZW5pZG8gYSBsYSBwYWdpbmEgWCwgc2kgZGVzZWEgbGVlciBsYXMgYWNjaW9uZXMgZGUgbGEgcGFnaW5hIHByZXNpb25lIGNvbnRyb2wgeSBlbnRlclwiKTtcbiAgICB9XG4gICAgc2F5R29vZGJheSgpIHtcbiAgICAgICAgdGhpcy50YWxrKFwiR3JhY2lhcyBwb3IgdXRpbGl6YXIgZXllZWFzc2lzdFwiKTtcbiAgICB9XG4gICAga2V5YmluZHNTY3JlZW5SZWFkZXIoZXZlbnQpIHtcbiAgICAgICAgdGhpcy5jYW5jZWxSZWFkZXIoZXZlbnQpO1xuICAgICAgICB0aGlzLnJlUmVhZChldmVudCk7XG4gICAgICAgIHRoaXMuYWN0aXZlU2NyZWVuUmVhZGVyKGV2ZW50KTtcbiAgICAgICAgdGhpcy5tb3ZlQmV0d2VlbkNvbnRlbnQoZXZlbnQpO1xuICAgICAgICB0aGlzLm1vdmVCZXR3ZWVuTGlua3MoZXZlbnQpO1xuICAgIH1cbiAgICBnZXRJbWFnZShzcmMpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0geWllbGQgZmV0Y2goc3JjKTtcbiAgICAgICAgICAgIHJldHVybiByZXNwb25zZTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGdldERlc2NyaXB0aW9uKGJsb2IpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIHRoaXMuY29udHJvbGxlciA9IG5ldyBBYm9ydENvbnRyb2xsZXIoKTtcbiAgICAgICAgICAgIGNvbnN0IGZvcm1EYXRhID0gbmV3IEZvcm1EYXRhKCk7XG4gICAgICAgICAgICBmb3JtRGF0YS5hcHBlbmQoJ2ZpbGUnLCBibG9iLCAnaW1hZ2VuLmpwZycpO1xuICAgICAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHtcbiAgICAgICAgICAgICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgICAgICAgICAgICBib2R5OiBmb3JtRGF0YSxcbiAgICAgICAgICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgICAgICAgICAgICdBdXRob3JpemF0aW9uJzogJ0JlYXJlciAnICsgdGhpcy50b2tlblxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgc2lnbmFsOiB0aGlzLmNvbnRyb2xsZXIuc2lnbmFsXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSB5aWVsZCBmZXRjaCgnaHR0cDovL2xvY2FsaG9zdDo4MDAwL2NhcHRpb24nLCBvcHRpb25zKVxuICAgICAgICAgICAgICAgIC5jYXRjaCgoZXJyb3IpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoZXJyb3IubmFtZSA9PT0gJ0Fib3J0RXJyb3InKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyb3IpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgaWYgKHJlc3BvbnNlICE9IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGRlc2NyaXB0aW9uID0geWllbGQgcmVzcG9uc2UuanNvbigpO1xuICAgICAgICAgICAgICAgIHJldHVybiBkZXNjcmlwdGlvbi5tZXNzYWdlWzBdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIFwiXCI7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICByZWFkQ2hpbGRzKGFydGljbGUpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgbGV0IGh0bWxFbGVtZW50ID0gYXJ0aWNsZTtcbiAgICAgICAgICAgIGlmIChodG1sRWxlbWVudC5jbGFzc05hbWUgPT0gJ3ZpZGVvX3BsYXllcl9leWVlYXNzaXN0Jykge1xuICAgICAgICAgICAgICAgIHZhciBwbGF5ZXIgPSBuZXcgWVQuUGxheWVyKGh0bWxFbGVtZW50LmlkLCB7XG4gICAgICAgICAgICAgICAgICAgIHZpZGVvSWQ6IGh0bWxFbGVtZW50LmlkLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBwbGF5ZXIucGxheVZpZGVvKCk7XG4gICAgICAgICAgICAgICAgfSwgNTAwMCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoYXJ0aWNsZS5ub2RlTmFtZSA9PSAnSU1HJykge1xuICAgICAgICAgICAgICAgIHRoaXMudGFsaygnSW1hZ2VuIGVuY29udHJhZGEnLCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgbGV0IGltZyA9IGFydGljbGU7XG4gICAgICAgICAgICAgICAgaWYgKGltZy5hbHQgIT0gXCJcIikge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnRhbGsoXCJcIik7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudGFsaygnSW1hZ2VuIGRlICcgKyBpbWcuYWx0LCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IHlpZWxkIHRoaXMuZ2V0SW1hZ2UoaW1nLnNyYyk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGJsb2IgPSB5aWVsZCByZXNwb25zZS5ibG9iKCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudGFsaygnZGVzY3JpYmllbmRvIGltYWdlbicsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZGVzY3JpcHRpb24gPSB5aWVsZCB0aGlzLmdldERlc2NyaXB0aW9uKGJsb2IpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoZGVzY3JpcHRpb24gIT0gXCJcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy50YWxrKCdJbWFnZW4gZGUgJyArIGRlc2NyaXB0aW9uLCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnRhbGsoJ05vIHNlIHB1ZG8gZ2VuZXJhciB1bmEgZGVzY3JpcGNpb24gcGFyYSBsYSBpbWFnZW4gZW5jb250cmFkYS4nLCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoYXJ0aWNsZS5ub2RlVHlwZSA9PSBOb2RlLlRFWFRfTk9ERSAmJiAoKF9hID0gYXJ0aWNsZS50ZXh0Q29udGVudCkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnRyaW0oKSkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnRhbGsoYXJ0aWNsZS50ZXh0Q29udGVudCwgZmFsc2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZm9yIChjb25zdCBjaGlsZCBvZiBBcnJheS5mcm9tKGFydGljbGUuY2hpbGROb2RlcykpIHtcbiAgICAgICAgICAgICAgICB5aWVsZCB0aGlzLnJlYWRDaGlsZHMoY2hpbGQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgbW92ZUJldHdlZW5Db250ZW50KGV2ZW50KSB7XG4gICAgICAgIGxldCB0YWdzID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJhcnRpY2xlXCIpO1xuICAgICAgICBpZiAodGFncy5sZW5ndGggPT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLnNjcmVlblJlYWRlclN0YXR1cyAmJlxuICAgICAgICAgICAgZXZlbnQuY3RybEtleSA9PT0gdHJ1ZSAmJlxuICAgICAgICAgICAgZXZlbnQua2V5LnRvTG93ZXJDYXNlKCkgPT09IFwiYXJyb3dyaWdodFwiKSB7XG4gICAgICAgICAgICB0aGlzLmFydGljbGVJbmRleCArPSAxO1xuICAgICAgICAgICAgdGhpcy5zZWxlY3RlZEFydGljbGUgPSB0YWdzW3RoaXMuYXJ0aWNsZUluZGV4XTtcbiAgICAgICAgICAgIHRoaXMuY2FuY2VsVGFsaygpO1xuICAgICAgICAgICAgdGhpcy5yZWFkQ2hpbGRzKHRoaXMuc2VsZWN0ZWRBcnRpY2xlKTtcbiAgICAgICAgICAgIGlmICh0aGlzLmFydGljbGVJbmRleCA9PT0gdGFncy5sZW5ndGggLSAxKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5hcnRpY2xlSW5kZXggPSAwO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLnNjcmVlblJlYWRlclN0YXR1cyAmJlxuICAgICAgICAgICAgZXZlbnQuY3RybEtleSA9PT0gdHJ1ZSAmJlxuICAgICAgICAgICAgZXZlbnQua2V5LnRvTG93ZXJDYXNlKCkgPT09IFwiYXJyb3dsZWZ0XCIpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmFydGljbGVJbmRleCA9PT0gLTEpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmFydGljbGVJbmRleCArPSAxO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuYXJ0aWNsZUluZGV4ID09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hcnRpY2xlSW5kZXggPSB0YWdzLmxlbmd0aCAtIDE7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmFydGljbGVJbmRleCAtPSAxO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWRBcnRpY2xlID0gdGFnc1t0aGlzLmFydGljbGVJbmRleF07XG4gICAgICAgICAgICB0aGlzLmNhbmNlbFRhbGsoKTtcbiAgICAgICAgICAgIHRoaXMucmVhZENoaWxkcyh0aGlzLnNlbGVjdGVkQXJ0aWNsZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgYWN0aXZlU2NyZWVuUmVhZGVyKGV2ZW50KSB7XG4gICAgICAgIGlmIChldmVudC5jdHJsS2V5ID09PSB0cnVlICYmIGV2ZW50LmtleS50b0xvd2VyQ2FzZSgpID09PSBcIiBcIikge1xuICAgICAgICAgICAgaWYgKCF0aGlzLnNjcmVlblJlYWRlclN0YXR1cykge1xuICAgICAgICAgICAgICAgIHRoaXMuc2F5V2VsY29tZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zYXlHb29kYmF5KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLnNjcmVlblJlYWRlclN0YXR1cyA9ICF0aGlzLnNjcmVlblJlYWRlclN0YXR1cztcbiAgICAgICAgfVxuICAgIH1cbiAgICBtb3ZlQmV0d2VlbkxpbmtzKGV2ZW50KSB7XG4gICAgICAgIGlmICh0aGlzLnNjcmVlblJlYWRlclN0YXR1cyAmJlxuICAgICAgICAgICAgZXZlbnQuY3RybEtleSA9PT0gZmFsc2UgJiZcbiAgICAgICAgICAgIGV2ZW50LmtleS50b0xvd2VyQ2FzZSgpID09PSBcImVudGVyXCIgJiZcbiAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWRMaW5rICE9IG51bGwpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKHRoaXMuc2VsZWN0ZWRMaW5rKTtcbiAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWRMaW5rLmNsaWNrKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuc2NyZWVuUmVhZGVyU3RhdHVzICYmXG4gICAgICAgICAgICBldmVudC5jdHJsS2V5ID09PSB0cnVlICYmXG4gICAgICAgICAgICBldmVudC5rZXkudG9Mb3dlckNhc2UoKSA9PT0gXCJlbnRlclwiKSB7XG4gICAgICAgICAgICBsZXQgbGlua3MgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKFwidGV4dF9yZWFkZXJfbGlua1wiKTtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGxpbmtzW3RoaXMubGlua0luZGV4XS50YWdOYW1lKTtcbiAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWRMaW5rID0gbGlua3NbdGhpcy5saW5rSW5kZXhdO1xuICAgICAgICAgICAgdGhpcy5zZWxlY3RlZExpbmsuZm9jdXMoKTtcbiAgICAgICAgICAgIGlmIChsaW5rc1t0aGlzLmxpbmtJbmRleF0udGFnTmFtZSA9PSBcIlRFWFRBUkVBXCIpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNlbGVjdGVkTGluay5hZGRFdmVudExpc3RlbmVyKFwiaW5wdXRcIiwgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyh0aGlzLnNlbGVjdGVkTGluayk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgdGhpcy50YWxrKFwiU2VsZWNjaW9uYWRvIHVuIHRleHQgYXJlYVwiLCB0cnVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLnNlbGVjdGVkTGluay50ZXh0Q29udGVudCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnRhbGsodGhpcy5zZWxlY3RlZExpbmsudGV4dENvbnRlbnQsIHRydWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0aGlzLmxpbmtJbmRleCA9PT0gbGlua3MubGVuZ3RoIC0gMSkge1xuICAgICAgICAgICAgICAgIHRoaXMubGlua0luZGV4ID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMubGlua0luZGV4ICs9IDE7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgY2FuY2VsUmVhZGVyKGV2ZW50KSB7XG4gICAgICAgIGlmIChldmVudC5rZXkudG9Mb3dlckNhc2UoKSA9PT0gXCJlc2NhcGVcIikge1xuICAgICAgICAgICAgdGhpcy50YWxrKFwiXCIpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJlUmVhZChldmVudCkge1xuICAgICAgICBpZiAoZXZlbnQuY3RybEtleSA9PT0gdHJ1ZSAmJiBldmVudC5rZXkudG9Mb3dlckNhc2UoKSA9PT0gXCJiYWNrc3BhY2VcIikge1xuICAgICAgICAgICAgaWYgKHRoaXMuc2VsZWN0ZWRBcnRpY2xlICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5zZWxlY3RlZEFydGljbGUudGV4dENvbnRlbnQgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnRhbGsodGhpcy5zZWxlY3RlZEFydGljbGUudGV4dENvbnRlbnQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn1cbiIsImV4cG9ydCBjbGFzcyBDc3NDbGFzc2VzIHtcbiAgICBzdGF0aWMgYWRkWm9vbU1lc3NhZ2VUZXh0Qm94Q2xhc3MoKSB7XG4gICAgICAgIGNvbnN0IHN0eWxlU2hlZXQgPSBkb2N1bWVudC5zdHlsZVNoZWV0c1swXTtcbiAgICAgICAgdmFyIGNzc1J1bGUgPSBgLnpvb20tbWVzc2FnZS10eHRib3ggeyAgXHJcbiAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xyXG4gICAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcclxuICAgICAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xyXG4gICAgICAgICAgcG9zaXRpb246IGZpeGVkO1xyXG4gICAgICAgICAgdG9wOiA1MCU7XHJcbiAgICAgICAgICBsZWZ0OiA1MCU7XHJcbiAgICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZSgtNTAlLCAtNTAlKTtcclxuICAgICAgICAgIHotaW5kZXg6IDk5OTk7XHJcbiAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjRkZGRjAwO1xyXG4gICAgICAgICAgY29sb3I6ICMwMDAwMDA7XHJcbiAgICAgICAgICBmb250LXNpemU6IDIwcmVtO1xyXG4gICAgICAgICAgdGV4dC1hbGlnbjogY2VudGVyO1xyXG4gICAgICAgICAgd2lkdGg6IDgwJTtcclxuICAgICAgICAgIGhlaWdodDogODAlO1xyXG4gICAgICAgICAgZm9udC1mYW1pbHk6IEFyaWFsLCBzYW5zLXNlcmlmO1xyXG4gICAgICB9YDtcbiAgICAgICAgc3R5bGVTaGVldC5pbnNlcnRSdWxlKGNzc1J1bGUsIHN0eWxlU2hlZXQuY3NzUnVsZXMubGVuZ3RoKTtcbiAgICB9XG59XG4iLCJleHBvcnQgY2xhc3MgWm9vbVNlcnZpY2Uge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLlRSQU5TSVRJT05fRFVSQVRJT04gPSA4MDA7XG4gICAgICAgIHRoaXMubGV2ZWwgPSAxO1xuICAgICAgICB0aGlzLm1vdXNlWCA9IDA7XG4gICAgICAgIHRoaXMubW91c2VZID0gMDtcbiAgICAgICAgdGhpcy5wYW5FbmdhZ2VUaW1lb3V0ID0gLTE7XG4gICAgICAgIHRoaXMucGFuVXBkYXRlSW50ZXJ2YWwgPSAtMTtcbiAgICAgICAgdGhpcy5jYWxsYmFja1RpbWVvdXQgPSAtMTtcbiAgICAgICAgdGhpcy5zdXBwb3J0c1RyYW5zZm9ybXMgPSAnV2Via2l0VHJhbnNmb3JtJyBpbiBkb2N1bWVudC5ib2R5LnN0eWxlIHx8XG4gICAgICAgICAgICAnTW96VHJhbnNmb3JtJyBpbiBkb2N1bWVudC5ib2R5LnN0eWxlIHx8XG4gICAgICAgICAgICAnbXNUcmFuc2Zvcm0nIGluIGRvY3VtZW50LmJvZHkuc3R5bGUgfHxcbiAgICAgICAgICAgICdPVHJhbnNmb3JtJyBpbiBkb2N1bWVudC5ib2R5LnN0eWxlIHx8XG4gICAgICAgICAgICAndHJhbnNmb3JtJyBpbiBkb2N1bWVudC5ib2R5LnN0eWxlO1xuICAgICAgICB0aGlzLmtleXVwRXZlbnQgPSAoZXZlbnQpID0+IHtcbiAgICAgICAgICAgIGlmICh0aGlzLmxldmVsICE9PSAxICYmIGV2ZW50LmtleUNvZGUgPT09IDI3KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5vdXQodW5kZWZpbmVkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5tb3VzZU1vdmVFdmVudCA9IChldmVudCkgPT4ge1xuICAgICAgICAgICAgaWYgKHRoaXMubGV2ZWwgIT09IDEpIHtcbiAgICAgICAgICAgICAgICB0aGlzLm1vdXNlWCA9IGV2ZW50LmNsaWVudFg7XG4gICAgICAgICAgICAgICAgdGhpcy5tb3VzZVkgPSBldmVudC5jbGllbnRZO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBpZiAodGhpcy5zdXBwb3J0c1RyYW5zZm9ybXMpIHtcbiAgICAgICAgICAgIC8vIFRoZSBlYXNpbmcgdGhhdCB3aWxsIGJlIGFwcGxpZWQgd2hlbiB3ZSB6b29tIGluL291dFxuICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5zdHlsZS50cmFuc2l0aW9uID0gJ3RyYW5zZm9ybSAnICsgdGhpcy5UUkFOU0lUSU9OX0RVUkFUSU9OICsgJ21zIGVhc2UnO1xuICAgICAgICAgICAgLy9kb2N1bWVudC5ib2R5LnN0eWxlLk9UcmFuc2l0aW9uID0gJy1vLXRyYW5zZm9ybSAnKyB0aGlzLlRSQU5TSVRJT05fRFVSQVRJT04gKydtcyBlYXNlJztcbiAgICAgICAgICAgIC8vZG9jdW1lbnQuYm9keS5zdHlsZS5tc1RyYW5zaXRpb24gPSAnLW1zLXRyYW5zZm9ybSAnKyB0aGlzLlRSQU5TSVRJT05fRFVSQVRJT04gKydtcyBlYXNlJztcbiAgICAgICAgICAgIC8vZG9jdW1lbnQuYm9keS5zdHlsZS5Nb3pUcmFuc2l0aW9uID0gJy1tb3otdHJhbnNmb3JtICcrIHRoaXMuVFJBTlNJVElPTl9EVVJBVElPTiArJ21zIGVhc2UnO1xuICAgICAgICAgICAgLy9kb2N1bWVudC5ib2R5LnN0eWxlLldlYmtpdFRyYW5zaXRpb24gPSAnLXdlYmtpdC10cmFuc2Zvcm0gJysgdGhpcy5UUkFOU0lUSU9OX0RVUkFUSU9OICsnbXMgZWFzZSc7XG4gICAgICAgIH1cbiAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigna2V5dXAnLCB0aGlzLmtleXVwRXZlbnQpO1xuICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCB0aGlzLm1vdXNlTW92ZUV2ZW50KTtcbiAgICB9XG4gICAgbWFnbmlmeShyZWN0LCBzY2FsZSkge1xuICAgICAgICB2YXIgc2Nyb2xsT2Zmc2V0ID0gdGhpcy5nZXRTY3JvbGxPZmZzZXQoKTtcbiAgICAgICAgLy8gRW5zdXJlIGEgd2lkdGgvaGVpZ2h0IGlzIHNldFxuICAgICAgICByZWN0LndpZHRoID0gcmVjdC53aWR0aCB8fCAxO1xuICAgICAgICByZWN0LmhlaWdodCA9IHJlY3QuaGVpZ2h0IHx8IDE7XG4gICAgICAgIC8vIENlbnRlciB0aGUgcmVjdCB3aXRoaW4gdGhlIHpvb21lZCB2aWV3cG9ydFxuICAgICAgICByZWN0LnggLT0gKHdpbmRvdy5pbm5lcldpZHRoIC0gKHJlY3Qud2lkdGggKiBzY2FsZSkpIC8gMjtcbiAgICAgICAgcmVjdC55IC09ICh3aW5kb3cuaW5uZXJIZWlnaHQgLSAocmVjdC5oZWlnaHQgKiBzY2FsZSkpIC8gMjtcbiAgICAgICAgaWYgKHRoaXMuc3VwcG9ydHNUcmFuc2Zvcm1zKSB7XG4gICAgICAgICAgICAvLyBSZXNldFxuICAgICAgICAgICAgaWYgKHNjYWxlID09PSAxKSB7XG4gICAgICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5zdHlsZS50cmFuc2Zvcm0gPSAnJztcbiAgICAgICAgICAgICAgICAvL2RvY3VtZW50LmJvZHkuc3R5bGUuT1RyYW5zZm9ybSA9ICcnO1xuICAgICAgICAgICAgICAgIC8vZG9jdW1lbnQuYm9keS5zdHlsZS5tc1RyYW5zZm9ybSA9ICcnO1xuICAgICAgICAgICAgICAgIC8vZG9jdW1lbnQuYm9keS5zdHlsZS5Nb3pUcmFuc2Zvcm0gPSAnJztcbiAgICAgICAgICAgICAgICAvL2RvY3VtZW50LmJvZHkuc3R5bGUuV2Via2l0VHJhbnNmb3JtID0gJyc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBTY2FsZVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdmFyIG9yaWdpbiA9IHNjcm9sbE9mZnNldC54ICsgJ3B4ICcgKyBzY3JvbGxPZmZzZXQueSArICdweCcsIHRyYW5zZm9ybSA9ICd0cmFuc2xhdGUoJyArIC1yZWN0LnggKyAncHgsJyArIC1yZWN0LnkgKyAncHgpIHNjYWxlKCcgKyBzY2FsZSArICcpJztcbiAgICAgICAgICAgICAgICBkb2N1bWVudC5ib2R5LnN0eWxlLnRyYW5zZm9ybU9yaWdpbiA9IG9yaWdpbjtcbiAgICAgICAgICAgICAgICAvL2RvY3VtZW50LmJvZHkuc3R5bGUuT1RyYW5zZm9ybU9yaWdpbiA9IG9yaWdpbjtcbiAgICAgICAgICAgICAgICAvL2RvY3VtZW50LmJvZHkuc3R5bGUubXNUcmFuc2Zvcm1PcmlnaW4gPSBvcmlnaW47XG4gICAgICAgICAgICAgICAgLy9kb2N1bWVudC5ib2R5LnN0eWxlLk1velRyYW5zZm9ybU9yaWdpbiA9IG9yaWdpbjtcbiAgICAgICAgICAgICAgICAvL2RvY3VtZW50LmJvZHkuc3R5bGUuV2Via2l0VHJhbnNmb3JtT3JpZ2luID0gb3JpZ2luO1xuICAgICAgICAgICAgICAgIGRvY3VtZW50LmJvZHkuc3R5bGUudHJhbnNmb3JtID0gdHJhbnNmb3JtO1xuICAgICAgICAgICAgICAgIC8vZG9jdW1lbnQuYm9keS5zdHlsZS5PVHJhbnNmb3JtID0gdHJhbnNmb3JtO1xuICAgICAgICAgICAgICAgIC8vZG9jdW1lbnQuYm9keS5zdHlsZS5tc1RyYW5zZm9ybSA9IHRyYW5zZm9ybTtcbiAgICAgICAgICAgICAgICAvL2RvY3VtZW50LmJvZHkuc3R5bGUuTW96VHJhbnNmb3JtID0gdHJhbnNmb3JtO1xuICAgICAgICAgICAgICAgIC8vZG9jdW1lbnQuYm9keS5zdHlsZS5XZWJraXRUcmFuc2Zvcm0gPSB0cmFuc2Zvcm07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAvLyBSZXNldFxuICAgICAgICAgICAgaWYgKHNjYWxlID09PSAxKSB7XG4gICAgICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5zdHlsZS5wb3NpdGlvbiA9ICcnO1xuICAgICAgICAgICAgICAgIGRvY3VtZW50LmJvZHkuc3R5bGUubGVmdCA9ICcnO1xuICAgICAgICAgICAgICAgIGRvY3VtZW50LmJvZHkuc3R5bGUudG9wID0gJyc7XG4gICAgICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5zdHlsZS53aWR0aCA9ICcnO1xuICAgICAgICAgICAgICAgIGRvY3VtZW50LmJvZHkuc3R5bGUuaGVpZ2h0ID0gJyc7XG4gICAgICAgICAgICAgICAgLy9kb2N1bWVudC5ib2R5LnN0eWxlLnpvb20gPSAnJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIFNjYWxlXG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBkb2N1bWVudC5ib2R5LnN0eWxlLnBvc2l0aW9uID0gJ3JlbGF0aXZlJztcbiAgICAgICAgICAgICAgICBkb2N1bWVudC5ib2R5LnN0eWxlLmxlZnQgPSAoLShzY3JvbGxPZmZzZXQueCArIHJlY3QueCkgLyBzY2FsZSkgKyAncHgnO1xuICAgICAgICAgICAgICAgIGRvY3VtZW50LmJvZHkuc3R5bGUudG9wID0gKC0oc2Nyb2xsT2Zmc2V0LnkgKyByZWN0LnkpIC8gc2NhbGUpICsgJ3B4JztcbiAgICAgICAgICAgICAgICBkb2N1bWVudC5ib2R5LnN0eWxlLndpZHRoID0gKHNjYWxlICogMTAwKSArICclJztcbiAgICAgICAgICAgICAgICBkb2N1bWVudC5ib2R5LnN0eWxlLmhlaWdodCA9IChzY2FsZSAqIDEwMCkgKyAnJSc7XG4gICAgICAgICAgICAgICAgLy9kb2N1bWVudC5ib2R5LnN0eWxlLnpvb20gPSBzY2FsZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLmxldmVsID0gc2NhbGU7XG4gICAgfVxuICAgIHBhbigpIHtcbiAgICAgICAgdmFyIHJhbmdlID0gMC4xMiwgcmFuZ2VYID0gd2luZG93LmlubmVyV2lkdGggKiByYW5nZSwgcmFuZ2VZID0gd2luZG93LmlubmVySGVpZ2h0ICogcmFuZ2UsIHNjcm9sbE9mZnNldCA9IHRoaXMuZ2V0U2Nyb2xsT2Zmc2V0KCk7XG4gICAgICAgIC8vIFVwXG4gICAgICAgIGlmICh0aGlzLm1vdXNlWSA8IHJhbmdlWSkge1xuICAgICAgICAgICAgd2luZG93LnNjcm9sbChzY3JvbGxPZmZzZXQueCwgc2Nyb2xsT2Zmc2V0LnkgLSAoMSAtICh0aGlzLm1vdXNlWSAvIHJhbmdlWSkpICogKDE0IC8gdGhpcy5sZXZlbCkpO1xuICAgICAgICB9XG4gICAgICAgIC8vIERvd25cbiAgICAgICAgZWxzZSBpZiAodGhpcy5tb3VzZVkgPiB3aW5kb3cuaW5uZXJIZWlnaHQgLSByYW5nZVkpIHtcbiAgICAgICAgICAgIHdpbmRvdy5zY3JvbGwoc2Nyb2xsT2Zmc2V0LngsIHNjcm9sbE9mZnNldC55ICsgKDEgLSAod2luZG93LmlubmVySGVpZ2h0IC0gdGhpcy5tb3VzZVkpIC8gcmFuZ2VZKSAqICgxNCAvIHRoaXMubGV2ZWwpKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBMZWZ0XG4gICAgICAgIGlmICh0aGlzLm1vdXNlWCA8IHJhbmdlWCkge1xuICAgICAgICAgICAgd2luZG93LnNjcm9sbChzY3JvbGxPZmZzZXQueCAtICgxIC0gKHRoaXMubW91c2VYIC8gcmFuZ2VYKSkgKiAoMTQgLyB0aGlzLmxldmVsKSwgc2Nyb2xsT2Zmc2V0LnkpO1xuICAgICAgICB9XG4gICAgICAgIC8vIFJpZ2h0XG4gICAgICAgIGVsc2UgaWYgKHRoaXMubW91c2VYID4gd2luZG93LmlubmVyV2lkdGggLSByYW5nZVgpIHtcbiAgICAgICAgICAgIHdpbmRvdy5zY3JvbGwoc2Nyb2xsT2Zmc2V0LnggKyAoMSAtICh3aW5kb3cuaW5uZXJXaWR0aCAtIHRoaXMubW91c2VYKSAvIHJhbmdlWCkgKiAoMTQgLyB0aGlzLmxldmVsKSwgc2Nyb2xsT2Zmc2V0LnkpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGdldFNjcm9sbE9mZnNldCgpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHg6IHdpbmRvdy5zY3JvbGxYICE9PSB1bmRlZmluZWQgPyB3aW5kb3cuc2Nyb2xsWCA6IHdpbmRvdy5wYWdlWE9mZnNldCxcbiAgICAgICAgICAgIHk6IHdpbmRvdy5zY3JvbGxZICE9PSB1bmRlZmluZWQgPyB3aW5kb3cuc2Nyb2xsWSA6IHdpbmRvdy5wYWdlWU9mZnNldFxuICAgICAgICB9O1xuICAgIH1cbiAgICB0byhvcHRpb25zKSB7XG4gICAgICAgIGlmICh0aGlzLmxldmVsICE9PSAxKSB7XG4gICAgICAgICAgICB0aGlzLm91dCh1bmRlZmluZWQpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgb3B0aW9ucy54ID0gb3B0aW9ucy54IHx8IDA7XG4gICAgICAgICAgICBvcHRpb25zLnkgPSBvcHRpb25zLnkgfHwgMDtcbiAgICAgICAgICAgIC8vIElmIGFuIGVsZW1lbnQgaXMgc2V0LCB0aGF0IHRha2VzIHByZWNlZGVuY2VcbiAgICAgICAgICAgIGlmICghIW9wdGlvbnMuZWxlbWVudCkge1xuICAgICAgICAgICAgICAgIC8vIFNwYWNlIGFyb3VuZCB0aGUgem9vbWVkIGluIGVsZW1lbnQgdG8gbGVhdmUgb24gc2NyZWVuXG4gICAgICAgICAgICAgICAgdmFyIHBhZGRpbmcgPSB0eXBlb2Ygb3B0aW9ucy5wYWRkaW5nID09PSAnbnVtYmVyJyA/IG9wdGlvbnMucGFkZGluZyA6IDIwO1xuICAgICAgICAgICAgICAgIHZhciBib3VuZHMgPSBvcHRpb25zLmVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICAgICAgICAgICAgb3B0aW9ucy54ID0gYm91bmRzLmxlZnQgLSBwYWRkaW5nO1xuICAgICAgICAgICAgICAgIG9wdGlvbnMueSA9IGJvdW5kcy50b3AgLSBwYWRkaW5nO1xuICAgICAgICAgICAgICAgIG9wdGlvbnMud2lkdGggPSBib3VuZHMud2lkdGggKyAocGFkZGluZyAqIDIpO1xuICAgICAgICAgICAgICAgIG9wdGlvbnMuaGVpZ2h0ID0gYm91bmRzLmhlaWdodCArIChwYWRkaW5nICogMik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBJZiB3aWR0aC9oZWlnaHQgdmFsdWVzIGFyZSBzZXQsIGNhbGN1bGF0ZSBzY2FsZSBmcm9tIHRob3NlIHZhbHVlc1xuICAgICAgICAgICAgaWYgKG9wdGlvbnMud2lkdGggIT09IHVuZGVmaW5lZCAmJiBvcHRpb25zLmhlaWdodCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgb3B0aW9ucy5zY2FsZSA9IE1hdGgubWF4KE1hdGgubWluKHdpbmRvdy5pbm5lcldpZHRoIC8gb3B0aW9ucy53aWR0aCwgd2luZG93LmlubmVySGVpZ2h0IC8gb3B0aW9ucy5oZWlnaHQpLCAxKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChvcHRpb25zLnNjYWxlID4gMSkge1xuICAgICAgICAgICAgICAgIG9wdGlvbnMueCAqPSBvcHRpb25zLnNjYWxlO1xuICAgICAgICAgICAgICAgIG9wdGlvbnMueSAqPSBvcHRpb25zLnNjYWxlO1xuICAgICAgICAgICAgICAgIG9wdGlvbnMueCA9IE1hdGgubWF4KG9wdGlvbnMueCwgMCk7XG4gICAgICAgICAgICAgICAgb3B0aW9ucy55ID0gTWF0aC5tYXgob3B0aW9ucy55LCAwKTtcbiAgICAgICAgICAgICAgICB0aGlzLm1hZ25pZnkob3B0aW9ucywgb3B0aW9ucy5zY2FsZSk7XG4gICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMucGFuICE9PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnBhbkVuZ2FnZVRpbWVvdXQgPSBzZXRUaW1lb3V0KHRoaXMuY2FsY3VsYXRlUGFuVXBkYXRlSW50ZXJ2YWwsIHRoaXMuVFJBTlNJVElPTl9EVVJBVElPTik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2Ygb3B0aW9ucy5jYWxsYmFjayA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmNhbGxiYWNrVGltZW91dCA9IHNldFRpbWVvdXQob3B0aW9ucy5jYWxsYmFjaywgdGhpcy5UUkFOU0lUSU9OX0RVUkFUSU9OKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgY2FsY3VsYXRlUGFuVXBkYXRlSW50ZXJ2YWwoKSB7XG4gICAgICAgIHRoaXMucGFuVXBkYXRlSW50ZXJ2YWwgPSBzZXRJbnRlcnZhbCh0aGlzLnBhbiwgMTAwMCAvIDYwKTtcbiAgICB9XG4gICAgb3V0KG9wdGlvbnMpIHtcbiAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMucGFuRW5nYWdlVGltZW91dCk7XG4gICAgICAgIGNsZWFySW50ZXJ2YWwodGhpcy5wYW5VcGRhdGVJbnRlcnZhbCk7XG4gICAgICAgIGNsZWFyVGltZW91dCh0aGlzLmNhbGxiYWNrVGltZW91dCk7XG4gICAgICAgIHRoaXMubWFnbmlmeShuZXcgT3B0aW9uc1pvb20oMCwgMCwgMSksIDEpO1xuICAgICAgICBpZiAob3B0aW9ucyAmJiB0eXBlb2Ygb3B0aW9ucy5jYWxsYmFjayA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgc2V0VGltZW91dChvcHRpb25zLmNhbGxiYWNrLCB0aGlzLlRSQU5TSVRJT05fRFVSQVRJT04pO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMubGV2ZWwgPSAxO1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBPcHRpb25zWm9vbSB7XG4gICAgY29uc3RydWN0b3IoeCwgeSwgc2NhbGUpIHtcbiAgICAgICAgdGhpcy54ID0gMDtcbiAgICAgICAgdGhpcy55ID0gMDtcbiAgICAgICAgdGhpcy5zY2FsZSA9IDA7XG4gICAgICAgIHRoaXMueCA9IHg7XG4gICAgICAgIHRoaXMueSA9IHk7XG4gICAgICAgIHRoaXMuc2NhbGUgPSBzY2FsZTtcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBGaWx0ZXIgfSBmcm9tICcuL2ZpbHRlci9maWx0ZXInO1xuaW1wb3J0IHsgU2NyZWVuUmVhZGVyIH0gZnJvbSAnLi9zY3JlZW5fcmVhZGVyL3NjcmVlbl9yZWFkZXInO1xuaW1wb3J0IHsgWm9vbSB9IGZyb20gJy4vem9vbS96b29tJztcbmNvbnN0IFpvb21PYmplY3QgPSBuZXcgWm9vbSh0cnVlKTtcbmNvbnN0IEZpbHRlck9iamVjdCA9IG5ldyBGaWx0ZXIodHJ1ZSk7XG5jb25zdCBTY3JlZW5SZWFkZXJPYmplY3QgPSBuZXcgU2NyZWVuUmVhZGVyKHRydWUsICdha2xqbnYxM2J2aTJ2Zm8wYjBidycpO1xuZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImtleWRvd25cIiwgKGV2ZW50KSA9PiB7XG4gICAgY29uc29sZS5sb2coZXZlbnQua2V5KTtcbiAgICBab29tT2JqZWN0LmFjdGl2ZVpvb20oU2NyZWVuUmVhZGVyT2JqZWN0LnN0YXR1cygpLCBldmVudCk7XG4gICAgU2NyZWVuUmVhZGVyT2JqZWN0LmtleWJpbmRzU2NyZWVuUmVhZGVyKGV2ZW50KTtcbn0pO1xuIiwiaW1wb3J0IHsgQ3NzQ2xhc3NlcyB9IGZyb20gXCIuL3N0eWxlcy9jc3Mtem9vbS1jbGFzc2VzXCI7XG5pbXBvcnQgeyBab29tU2VydmljZSwgT3B0aW9uc1pvb20gfSBmcm9tIFwiLi96b29tLW1vZHVsZS96b29tX3NlcnZpY2VcIjtcbmV4cG9ydCBjbGFzcyBab29tIHtcbiAgICBjb25zdHJ1Y3RvcihlbmFibGVab29tT3B0aW9ucyA9IGZhbHNlKSB7XG4gICAgICAgIHRoaXMuZW5hYmxlWm9vbU9wdGlvbnMgPSBlbmFibGVab29tT3B0aW9ucztcbiAgICAgICAgdGhpcy56b29tU3RhdHVzID0gZmFsc2U7XG4gICAgICAgIHRoaXMuYWN0aXZlX21lc3NhZ2UgPSBgPGRpdiBpZD1cInpvb20tc3RhdHVzXCIgY2xhc3M9XCJ6b29tLW1lc3NhZ2UtdHh0Ym94XCI+T248L2Rpdj5gO1xuICAgICAgICB0aGlzLmRlYWN0aXZlX21lc3NhZ2UgPSBgPGRpdiBpZD1cInpvb20tc3RhdHVzXCIgY2xhc3M9XCJ6b29tLW1lc3NhZ2UtdHh0Ym94XCI+T2ZmPC9kaXY+YDtcbiAgICAgICAgdGhpcy50b29nbGVab29tID0gKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICB0aGlzLnpvb21TZXJ2aWNlLnRvKG5ldyBPcHRpb25zWm9vbShldmVudC54LCBldmVudC55LCAxMCkpO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLnpvb21TZXJ2aWNlID0gbmV3IFpvb21TZXJ2aWNlKCk7XG4gICAgfVxuICAgIGFjdGl2ZVpvb20oc2NyZWVuUmVhZGVyQWN0aXZlLCBldmVudCkge1xuICAgICAgICBpZiAoIXRoaXMuZW5hYmxlWm9vbU9wdGlvbnMpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXNjcmVlblJlYWRlckFjdGl2ZSAmJiBldmVudC5jdHJsS2V5ID09PSB0cnVlICYmIGV2ZW50LmtleS50b0xvd2VyQ2FzZSgpID09PSBcImJhY2tzcGFjZVwiKSB7XG4gICAgICAgICAgICBDc3NDbGFzc2VzLmFkZFpvb21NZXNzYWdlVGV4dEJveENsYXNzKCk7XG4gICAgICAgICAgICB0aGlzLmluaXRpYWxDbGlja0V2ZW50KGRvY3VtZW50LmJvZHkpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGluaXRpYWxDbGlja0V2ZW50KGJvZHkpIHtcbiAgICAgICAgaWYgKCF0aGlzLnpvb21TdGF0dXMpIHtcbiAgICAgICAgICAgIHRoaXMuc2hvd0JveE1lc3NhZ2UoYm9keSwgdGhpcy5hY3RpdmVfbWVzc2FnZSwgIXRoaXMuem9vbVN0YXR1cyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnNob3dCb3hNZXNzYWdlKGJvZHksIHRoaXMuZGVhY3RpdmVfbWVzc2FnZSwgIXRoaXMuem9vbVN0YXR1cyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy56b29tU3RhdHVzID0gIXRoaXMuem9vbVN0YXR1cztcbiAgICB9XG4gICAgc2hvd0JveE1lc3NhZ2UoYm9keSwgbWVzc2FnZSwgc3RhdHVzKSB7XG4gICAgICAgIGJvZHkuaW5zZXJ0QWRqYWNlbnRIVE1MKFwiYmVmb3JlYmVnaW5cIiwgbWVzc2FnZSk7XG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgY29uc3Qgem9vbV9tZXNzYWdlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJ6b29tLXN0YXR1c1wiKTtcbiAgICAgICAgICAgIHpvb21fbWVzc2FnZSA9PT0gbnVsbCB8fCB6b29tX21lc3NhZ2UgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHpvb21fbWVzc2FnZS5yZW1vdmUoKTtcbiAgICAgICAgfSwgMjAwMCk7XG4gICAgICAgIHN0YXR1cyA/IGJvZHkuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLnRvb2dsZVpvb20pIDogYm9keS5yZW1vdmVFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgdGhpcy50b29nbGVab29tKTtcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBGaWx0ZXJTZXJ2aWNlIH0gZnJvbSBcIi4vZmlsdGVyLW1vZHVsZS9maWx0ZXJfc2VydmljZVwiO1xuaW1wb3J0IHsgQ3NzRmlsdGVyQ2xhc3NlcyB9IGZyb20gXCIuL3N0eWxlcy9jc3MtZmlsdGVyLWNsYXNzZXNcIjtcbmV4cG9ydCBjbGFzcyBGaWx0ZXIge1xuICAgIGNvbnN0cnVjdG9yKGVuYWJsZUZpbHRlciA9IGZhbHNlKSB7XG4gICAgICAgIHRoaXMuZW5hYmxlRmlsdGVyID0gZW5hYmxlRmlsdGVyO1xuICAgICAgICB0aGlzLmZpbHRlclZpZXdPbiA9IGZhbHNlO1xuICAgICAgICB0aGlzLnN0YXJ0RmlsdGVyID0gKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICBjb25zdCBjb21wb25lbnQgPSBldmVudC50YXJnZXQ7XG4gICAgICAgICAgICB0aGlzLmZpbHRlclNlcnZpY2UuYXBsaWNhckZpbHRybyhjb21wb25lbnQudGV4dENvbnRlbnQpO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLnNob3dGaWx0ZXJPcHRpb25zTGlzdCA9ICgpID0+IHtcbiAgICAgICAgICAgIGlmICh0aGlzLmZpbHRlclZpZXdPbikge1xuICAgICAgICAgICAgICAgIHZhciBmaWx0ZXJfYnVmZmVyX2luc3RhbmNlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJmaWx0ZXJfYnVmZmVyXCIpO1xuICAgICAgICAgICAgICAgIGlmIChmaWx0ZXJfYnVmZmVyX2luc3RhbmNlID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcignTm8gaGF5IGluc3RhbmNpYSBkZWwgYnVmZmVyIGRlIG9wY2lvbmVzLicpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGZpbHRlcl9idWZmZXJfaW5zdGFuY2UucmVtb3ZlKCk7XG4gICAgICAgICAgICAgICAgdGhpcy5maWx0ZXJWaWV3T24gPSAhdGhpcy5maWx0ZXJWaWV3T247XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgZmlsdGVyTGlzdCA9IFtcbiAgICAgICAgICAgICAgICBcInByb3Rhbm9waWFcIixcbiAgICAgICAgICAgICAgICBcInByb3Rhbm9tYWx5XCIsXG4gICAgICAgICAgICAgICAgXCJkZXV0ZXJhbm9waWFcIixcbiAgICAgICAgICAgICAgICBcImRldXRlcmFub21hbHlcIixcbiAgICAgICAgICAgICAgICBcInRyaXRhbm9waWFcIixcbiAgICAgICAgICAgICAgICBcInRyaXRhbm9tYWx5XCIsXG4gICAgICAgICAgICAgICAgXCJhY2hyb21hdG9wc2lhXCIsXG4gICAgICAgICAgICAgICAgXCJhY2hyb21hdG9tYWx5XCIsXG4gICAgICAgICAgICAgICAgXCJncmF5c2NhbGVcIixcbiAgICAgICAgICAgIF07XG4gICAgICAgICAgICBjb25zdCBjb2xvck9wdGlvbnMgPSBbXG4gICAgICAgICAgICAgICAgXCJjb2xvcnNcIixcbiAgICAgICAgICAgICAgICBcImZpbHRlclwiXG4gICAgICAgICAgICBdO1xuICAgICAgICAgICAgdmFyIGJ1ZmZlckxpc3REaXZFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgICAgICBidWZmZXJMaXN0RGl2RWxlbWVudC5jbGFzc05hbWUgPSAnZmlsdGVyLWxpc3QtYnVmZmVyJztcbiAgICAgICAgICAgIGJ1ZmZlckxpc3REaXZFbGVtZW50LmlkID0gJ2ZpbHRlcl9idWZmZXInO1xuICAgICAgICAgICAgdmFyIGZpbHRlcl9idXR0b24gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImZpbHRlcl9idXR0b25cIik7XG4gICAgICAgICAgICBpZiAoZmlsdGVyX2J1dHRvbiA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcignTm8gc2UgY3JlbyBlbCBib3RvbiBjb3JyZWN0YW1lbnRlLicpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZpbHRlcl9idXR0b24uYXBwZW5kQ2hpbGQoYnVmZmVyTGlzdERpdkVsZW1lbnQpO1xuICAgICAgICAgICAgQ3NzRmlsdGVyQ2xhc3Nlcy5hZGRGaWx0ZXJCdWZmZXJTdHlsZUNsYXNzKCk7XG4gICAgICAgICAgICAvKmNvbG9yT3B0aW9ucy5mb3JFYWNoKChvcHRpb24pID0+IHtcbiAgICAgICAgICAgICAgY29uc3QgZmlsdGVyX2J1ZmZlciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiZmlsdGVyX2J1ZmZlclwiKTtcbiAgICAgICAgICAgICAgZmlsdGVyX2J1ZmZlci5pbnNlcnRBZGphY2VudEhUTUwoXCJiZWZvcmVlbmRcIiwgYnVpbGRDb2xvck9wdGlvbnMob3B0aW9uKSk7XG4gICAgICAgICAgICB9KSovXG4gICAgICAgICAgICBmaWx0ZXJMaXN0LmZvckVhY2goKGZpbHRlcikgPT4ge1xuICAgICAgICAgICAgICAgIHZhciBmaWx0ZXJfYnVmZmVyX2luc3RhbmNlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJmaWx0ZXJfYnVmZmVyXCIpO1xuICAgICAgICAgICAgICAgIGlmIChmaWx0ZXJfYnVmZmVyX2luc3RhbmNlID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcignTm8gaGF5IGluc3RhbmNpYSBkZWwgYnVmZmVyIGRlIG9wY2lvbmVzLicpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGZpbHRlcl9idWZmZXJfaW5zdGFuY2UuYXBwZW5kQ2hpbGQodGhpcy5idWlsZEZpbHRlck9wdGlvbihmaWx0ZXIpKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgQ3NzRmlsdGVyQ2xhc3Nlcy5hZGRGaWx0ZXJPcHRpb25zU3R5bGVDbGFzcygpO1xuICAgICAgICAgICAgdGhpcy5maWx0ZXJWaWV3T24gPSAhdGhpcy5maWx0ZXJWaWV3T247XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuZmlsdGVyU2VydmljZSA9IG5ldyBGaWx0ZXJTZXJ2aWNlKCk7XG4gICAgICAgIHRoaXMuc2hvd0ZpbHRlck9wdGlvbnMoKTtcbiAgICB9XG4gICAgc2hvd0ZpbHRlck9wdGlvbnMoKSB7XG4gICAgICAgIGNvbnN0IGltYWdlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaW1nJyk7XG4gICAgICAgIGltYWdlLnNyYyA9IFwiaHR0cHM6Ly9naXRodWIuY29tL0V5ZWVBc3Npc3QvZG9jcy9ibG9iL2RldmVsb3Avc3JjL2Fzc2V0cy9sb2dvLnBuZz9yYXc9dHJ1ZVwiO1xuICAgICAgICBpbWFnZS5zdHlsZS53aWR0aCA9ICc1MHB4JztcbiAgICAgICAgaW1hZ2Uuc3R5bGUuYm9yZGVyUmFkaXVzID0gJzUwJSc7XG4gICAgICAgIGNvbnN0IGRpdkVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgZGl2RWxlbWVudC5jbGFzc05hbWUgPSAnZmlsdGVyX2J1dHRvbic7XG4gICAgICAgIGRpdkVsZW1lbnQuaWQgPSAnZmlsdGVyX2J1dHRvbic7XG4gICAgICAgIGRpdkVsZW1lbnQuYXBwZW5kQ2hpbGQoaW1hZ2UpO1xuICAgICAgICBkaXZFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5zaG93RmlsdGVyT3B0aW9uc0xpc3QpO1xuICAgICAgICBDc3NGaWx0ZXJDbGFzc2VzLmFkZEZpbHRlclN0eWxlQ2xhc3MoKTtcbiAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChkaXZFbGVtZW50KTtcbiAgICB9XG4gICAgYnVpbGRGaWx0ZXJPcHRpb24oZmlsdGVyT3B0aW9uKSB7XG4gICAgICAgIHZhciBvcHRpb25EaXZFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgIG9wdGlvbkRpdkVsZW1lbnQuY2xhc3NOYW1lID0gJ2ZpbHRlci1vcHRpb24nO1xuICAgICAgICBvcHRpb25EaXZFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5zdGFydEZpbHRlcik7XG4gICAgICAgIG9wdGlvbkRpdkVsZW1lbnQudGV4dENvbnRlbnQgPSBmaWx0ZXJPcHRpb247XG4gICAgICAgIHJldHVybiBvcHRpb25EaXZFbGVtZW50O1xuICAgIH1cbn1cbiJdLCJuYW1lcyI6WyJGaWx0ZXJTZXJ2aWNlIiwiY29uc3RydWN0b3IiLCJ0aGlzIiwiaGFzSW5zZXJ0ZWRBY2Nlc3MiLCJhY3RpdmVfZmlsdGVyIiwiY29sb3JCbGluZG5lc3NDbGFzc2VzIiwidmlzaW9uQ2xhc3NlcyIsImNzc0ZpbHRlciIsInN2Z0ZpbHRlclRlbXBsYXRlIiwiYXBsaWNhckZpbHRybyIsImZpbHRybyIsInJlbW92ZVRlc3RzIiwidG9nZ2xlVGVzdCIsImNvbnNvbGUiLCJlcnJvciIsInRlc3RUeXBlIiwidGVzdENsYXNzIiwiaW5zZXJ0RmlsZXMiLCJkb2N1bWVudCIsImRvY3VtZW50RWxlbWVudCIsImNsYXNzTGlzdCIsImFkZCIsInN2ZyIsImNzcyIsImJvZHkiLCJpbnNlcnRBZGphY2VudEhUTUwiLCJpIiwibGVuZ3RoIiwicmVtb3ZlIiwiQ3NzRmlsdGVyQ2xhc3NlcyIsImFkZEZpbHRlckJ1ZmZlclN0eWxlQ2xhc3MiLCJzdHlsZVNoZWV0Iiwic3R5bGVTaGVldHMiLCJpbnNlcnRSdWxlIiwiY3NzUnVsZXMiLCJhZGRGaWx0ZXJPcHRpb25zU3R5bGVDbGFzcyIsImFkZEZpbHRlclN0eWxlQ2xhc3MiLCJfX2F3YWl0ZXIiLCJ0aGlzQXJnIiwiX2FyZ3VtZW50cyIsIlAiLCJnZW5lcmF0b3IiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsImZ1bGZpbGxlZCIsInZhbHVlIiwic3RlcCIsIm5leHQiLCJlIiwicmVqZWN0ZWQiLCJyZXN1bHQiLCJkb25lIiwidGhlbiIsImFwcGx5IiwiQ3NzQ2xhc3NlcyIsImFkZFpvb21NZXNzYWdlVGV4dEJveENsYXNzIiwiWm9vbVNlcnZpY2UiLCJUUkFOU0lUSU9OX0RVUkFUSU9OIiwibGV2ZWwiLCJtb3VzZVgiLCJtb3VzZVkiLCJwYW5FbmdhZ2VUaW1lb3V0IiwicGFuVXBkYXRlSW50ZXJ2YWwiLCJjYWxsYmFja1RpbWVvdXQiLCJzdXBwb3J0c1RyYW5zZm9ybXMiLCJzdHlsZSIsImtleXVwRXZlbnQiLCJldmVudCIsImtleUNvZGUiLCJvdXQiLCJ1bmRlZmluZWQiLCJtb3VzZU1vdmVFdmVudCIsImNsaWVudFgiLCJjbGllbnRZIiwidHJhbnNpdGlvbiIsImFkZEV2ZW50TGlzdGVuZXIiLCJtYWduaWZ5IiwicmVjdCIsInNjYWxlIiwic2Nyb2xsT2Zmc2V0IiwiZ2V0U2Nyb2xsT2Zmc2V0Iiwid2lkdGgiLCJoZWlnaHQiLCJ4Iiwid2luZG93IiwiaW5uZXJXaWR0aCIsInkiLCJpbm5lckhlaWdodCIsInRyYW5zZm9ybSIsIm9yaWdpbiIsInRyYW5zZm9ybU9yaWdpbiIsInBvc2l0aW9uIiwibGVmdCIsInRvcCIsInBhbiIsInJhbmdlWCIsInJhbmdlWSIsInNjcm9sbCIsInNjcm9sbFgiLCJwYWdlWE9mZnNldCIsInNjcm9sbFkiLCJwYWdlWU9mZnNldCIsInRvIiwib3B0aW9ucyIsImVsZW1lbnQiLCJwYWRkaW5nIiwiYm91bmRzIiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwiTWF0aCIsIm1heCIsIm1pbiIsInNldFRpbWVvdXQiLCJjYWxjdWxhdGVQYW5VcGRhdGVJbnRlcnZhbCIsImNhbGxiYWNrIiwic2V0SW50ZXJ2YWwiLCJjbGVhclRpbWVvdXQiLCJjbGVhckludGVydmFsIiwiT3B0aW9uc1pvb20iLCJab29tT2JqZWN0IiwiZW5hYmxlWm9vbU9wdGlvbnMiLCJ6b29tU3RhdHVzIiwiYWN0aXZlX21lc3NhZ2UiLCJkZWFjdGl2ZV9tZXNzYWdlIiwidG9vZ2xlWm9vbSIsInpvb21TZXJ2aWNlIiwiYWN0aXZlWm9vbSIsInNjcmVlblJlYWRlckFjdGl2ZSIsImN0cmxLZXkiLCJrZXkiLCJ0b0xvd2VyQ2FzZSIsImluaXRpYWxDbGlja0V2ZW50Iiwic2hvd0JveE1lc3NhZ2UiLCJtZXNzYWdlIiwic3RhdHVzIiwiem9vbV9tZXNzYWdlIiwiZ2V0RWxlbWVudEJ5SWQiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiU2NyZWVuUmVhZGVyT2JqZWN0IiwiZW5hYmxlRmlsdGVyIiwiZmlsdGVyVmlld09uIiwic3RhcnRGaWx0ZXIiLCJjb21wb25lbnQiLCJ0YXJnZXQiLCJmaWx0ZXJTZXJ2aWNlIiwidGV4dENvbnRlbnQiLCJzaG93RmlsdGVyT3B0aW9uc0xpc3QiLCJmaWx0ZXJfYnVmZmVyX2luc3RhbmNlIiwiYnVmZmVyTGlzdERpdkVsZW1lbnQiLCJjcmVhdGVFbGVtZW50IiwiY2xhc3NOYW1lIiwiaWQiLCJmaWx0ZXJfYnV0dG9uIiwiYXBwZW5kQ2hpbGQiLCJmb3JFYWNoIiwiZmlsdGVyIiwiYnVpbGRGaWx0ZXJPcHRpb24iLCJzaG93RmlsdGVyT3B0aW9ucyIsImltYWdlIiwic3JjIiwiYm9yZGVyUmFkaXVzIiwiZGl2RWxlbWVudCIsImZpbHRlck9wdGlvbiIsIm9wdGlvbkRpdkVsZW1lbnQiLCJ1c2VTY3JlZW5SZWFkZXIiLCJ0b2tlbiIsIl9hIiwic3ludGgiLCJzcGVlY2hTeW50aGVzaXMiLCJzY3JlZW5SZWFkZXJTdGF0dXMiLCJzZWxlY3RlZEFydGljbGUiLCJzZWxlY3RlZExpbmsiLCJhcnRpY2xlSW5kZXgiLCJsaW5rSW5kZXgiLCJjb250cm9sbGVyIiwiQWJvcnRDb250cm9sbGVyIiwidGFsayIsInRleHQiLCJjYW5jZWwiLCJzcGVhayIsIlNwZWVjaFN5bnRoZXNpc1V0dGVyYW5jZSIsImNhbmNlbFRhbGsiLCJhYm9ydCIsInRhZyIsImZpcnN0U2NyaXB0VGFnIiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJwYXJlbnROb2RlIiwiaW5zZXJ0QmVmb3JlIiwic2F5V2VsY29tZSIsInNheUdvb2RiYXkiLCJrZXliaW5kc1NjcmVlblJlYWRlciIsImNhbmNlbFJlYWRlciIsInJlUmVhZCIsImFjdGl2ZVNjcmVlblJlYWRlciIsIm1vdmVCZXR3ZWVuQ29udGVudCIsIm1vdmVCZXR3ZWVuTGlua3MiLCJnZXRJbWFnZSIsImZldGNoIiwiZ2V0RGVzY3JpcHRpb24iLCJibG9iIiwiZm9ybURhdGEiLCJGb3JtRGF0YSIsImFwcGVuZCIsIm1ldGhvZCIsImhlYWRlcnMiLCJzaWduYWwiLCJyZXNwb25zZSIsImNhdGNoIiwibmFtZSIsImpzb24iLCJyZWFkQ2hpbGRzIiwiYXJ0aWNsZSIsImh0bWxFbGVtZW50IiwicGxheWVyIiwiWVQiLCJQbGF5ZXIiLCJ2aWRlb0lkIiwicGxheVZpZGVvIiwibm9kZU5hbWUiLCJpbWciLCJhbHQiLCJkZXNjcmlwdGlvbiIsIm5vZGVUeXBlIiwiTm9kZSIsIlRFWFRfTk9ERSIsInRyaW0iLCJjaGlsZCIsIkFycmF5IiwiZnJvbSIsImNoaWxkTm9kZXMiLCJ0YWdzIiwibG9nIiwiY2xpY2siLCJsaW5rcyIsImdldEVsZW1lbnRzQnlDbGFzc05hbWUiLCJ0YWdOYW1lIiwiZm9jdXMiXSwic291cmNlUm9vdCI6IiJ9